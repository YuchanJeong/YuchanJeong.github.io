[{"content":"","date":"1 November 2022","permalink":"/categories/error/","section":"Categories","summary":"","title":"\u003cError\u003e"},{"content":"","date":"1 November 2022","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"1 November 2022","permalink":"/tags/git/","section":"Tags","summary":"","title":"Git"},{"content":" 현재 Hugo와 github.io를 통해 깃허브 페이지로 블로그를 배포 중이다. 개요 # 원래는 개인 맥북으로만 블로깅을 했는데 취업을 하게 되면서 회사 컴퓨터로도 블로깅을 시작했고, 컴퓨터 두 대를 이용해 블로깅 하는 과정에서 만난 문제와 해결 방안을 기록하고자 한다.\n문제 # blog 저장소에는 블로그 설정, 테마 등의 모든 요소가 저장되고 yuchanjeong.github.io 저장소에는 빌드 된 정적 파일들만 저장되고 있다. blog에서 블로그에 관한 모든 것들을 관리하고 yuchanjeong.github.io는 서브 모듈로 관리하고 있는데 git clone을 한 뒤 push를 했을 때 blog에는 정상적으로 반영되나 yuchanjeong.github.io에는 반영이 되지 않는 문제가 발생했다.\n해결 # 문제의 원인은 일반 클론 시 서브 모듈까지 클론하지 않기 때문이었다. 그래서 git clone --recurse-submodules를 통해 서브 모듈까지 클론했다. 하지만 여전히 문제가 해결되지 않았다. cd public을 통해 서브 모듈로 이동한 뒤 확인해 보자 브랜치가 main이 아니었고 브랜치를 메인으로 이동하자 문제가 해결되었다.\nPs. 만약 기존 폴더를 그대로 사용한다면 git pull origin main --rebase를 통해 변경사항을 받은 뒤 서브 모듈로 이동해 git pull origin main -f를 통해 서브 모듈의 변경사항도 받으면 해결된다.\nEtc # 서브 모듈 등록 git submodule add -b main https://github.com/YuchanJeong/yuchanjeong.github.io.git public 원격 저장소의 서브 모듈을 받아옴 git submodule update --remote ","date":"1 November 2022","permalink":"/posts/error/1/","section":"Posts","summary":"현재 Hugo와 github.","title":"Github Blog Submodule Error"},{"content":"","date":"1 November 2022","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"1 November 2022","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":" A blog from a developer who loves \u0026ldquo;Why?\u0026rdquo; :) Previous posts are in this repository. 😊 About me # Name Yuchan Jeong Career WithBecon(FE Developer) Languages Korean(Native), English(Intermediate) 👇 Follow me on # Mobile Number +82 10 8295 2674 E-mail yuchanjeong0923@gmail.com Blog https://yuchanjeong.github.io Github /yuchanjeong ","date":"1 November 2022","permalink":"/","section":"Yuchan's hello world!","summary":"A blog from a developer who loves \u0026ldquo;Why?","title":"Yuchan's hello world!"},{"content":"","date":"31 October 2022","permalink":"/categories/summary/","section":"Categories","summary":"","title":"\u003cSummary\u003e"},{"content":"1) 기본 설정 # Command Details git init 깃 추적 시작 git config --global --list 기본 설정 보기 git config --global core.autocrlf true 개행문자 설정 git config --global user.name YuchanJeong 사용자 이름 설정 git config --global user.email yuchanjeong0923@gmail.com 사용자 메일 설정 git config --global core.editor vim 기본 에디터 설정 git config --global init.defaultBranch main 기본 브랜치 설정 git config --global commit.template ~/.gitmessage.txt 커밋 템플릿 설정 .vimrc\rset nocompatible \u0026#34; 오리지날 VI와 호환하지 않음 set autoindent \u0026#34; 자동 들여쓰기 set cindent \u0026#34; C 프로그래밍용 자동 들여쓰기 set smartindent \u0026#34; 스마트한 들여쓰기 set wrap set nowrapscan \u0026#34; 검색할 때 문서의 끝에서 처음으로 안돌아감 set nobackup \u0026#34; 백업 파일을 안만듬 set noswapfile \u0026#34;set visualbell \u0026#34; 키를 잘못눌렀을 때 화면 프레시 set ruler \u0026#34; 화면 우측 하단에 현재 커서의 위치(줄,칸) 표시 set shiftwidth=4 \u0026#34; 자동 들여쓰기 4칸 set number \u0026#34; 행번호 표시, set nu 도 가능 set fencs=ucs-bom,utf-8,euc-kr.latin1 \u0026#34; 한글 파일은 euc-kr로, 유니코드는 유니코드로 set fileencoding=utf-8 \u0026#34; 파일저장인코딩 set tenc=utf-8 \u0026#34; 터미널 인코딩 \u0026#34;set expandtab \u0026#34; 탭대신 스페이스 set hlsearch \u0026#34; 검색어 강조, set hls 도 가능 set ignorecase \u0026#34; 검색시 대소문자 무시, set ic 도 가능 set tabstop=4 \u0026#34; 탭을 4칸으로 set lbr set incsearch \u0026#34; 키워드 입력시 점진적 검색 set cursorline \u0026#34; 편집 위치에 커서 라인 설정 set laststatus=2 \u0026#34; 상태바 표시를 항상한다 syntax on \u0026#34; 구문강조 사용 filetype indent on \u0026#34; 파일 종류에 따른 구문강조 set background=dark \u0026#34; 하이라이팅 lihgt / dark set backspace=eol,start,indent \u0026#34; 줄의 끝, 시작, 들여쓰기에서 백스페이스시 이전줄로 set history=1000 \u0026#34; vi 편집기록 기억갯수 .viminfo에 기록 highlight Comment term=bold cterm=bold ctermfg=4 \u0026#34; 코멘트 하이라이트 set mouse=a \u0026#34; vim에서 마우스 사용 set t_Co=256 \u0026#34; 색 조정 .gitmessage.txt\r# ---------- # [add] 기능 추가 / e.g. [add] 로그인 기능 추가: 자체 로그인, Kakao 소셜 로그인 # [delete] 기능 삭제 / e.g. [delete] Kakao 소셜 로그인 기능 삭제 # [update] 기능 개선 / e.g. [update] 자체 로그인에 성별 입력 추가 # [change] 기능 변경 / e.g. [change] 로그인 유효성 검사 조건 변경 # [modify] 기능 변경 없는 코드 변경 / e.g. [modify] 단순 주석 및 변수명 변경 # [fix] 문제 해결 / e.g. [fix] 비밀번호 대소문자 미구분 문제 해결 # [setting] 설치 및 설정 / e.g. [setting] 리덕스 설치 및 초기 설정 # [style] 스타일 관련 작업 / e.g. [style] 자체 로그인 페이지 스타일 적용 # [docs] 문서 관련 작업 / e.g. [docs] README.md 수정 # [test] 테스트 관련 작업 / e.g. [test] 결제 기능 테스트용 코드 # [chore] 기타 작업 / e.g. [chore] 빌드파일 수정 # ---------- # 개조식으로 작성 # \u0026#34;어떻게\u0026#34;가 아닌 \u0026#34;무엇\u0026#34;을 설명, 필요할 경우 \u0026#34;왜\u0026#34;도 설명 # 내용이 필요할 경우 제목에서 한 줄 띄우고 작성 # 내용이 여러 줄일 때는 \u0026#34;-\u0026#34;로 구분 # ---------- # \u0026#34;... 추가\u0026#34;는 [add], \u0026#34;...에 ... 추가\u0026#34;는 [update] # 리팩토링 등의 중요한 변경이 아닌 [modify]는 \u0026#34;단순\u0026#34; 키워드 사용 2) 원격 저장소 # Command Details git remote -v 원격 저장소 연결 확인 git remote add [name] [url] 원격 저장소 연결 git remote remove [name] 원격 저장소 연결 해제 git push [name] [branch] (-f) 원격 저장소에 Push (강제) git pull [name] [branch] (--rebase) 원격 저장소 Pull (이어 붙히기) git clone [url] ([directory]) 원격 저장소 복사 (폴더명) 3) 파일 상태 # Command Details git status 파일 상태 확인 git diff 파일 상태 비교*작업역역과 스테이지 차이 git diff --cached 파일 상태 비교*스테이지와 저장소 차이 git diff [commit] [commit] 커밋 간 상태 비교 git diff [branch] [branch] 브랜치 간 상태 비교 4) 스테이징 (추가) # Command Details git add -p 변경 내용을 확인 후 청크 별로 추가*y(추가), n(제외), q(종료) git add [directory] 해당 폴더 및 하위 폴더의 변경 내용을 추가 git add . 현재 폴더 및 하위 폴더의 변경 내용을 추가 5) 커밋 (확정) # Command Details git commit 커밋 생성 git commit -m \u0026ldquo;[msg]\u0026rdquo; 커밋 메시지와 함께 커밋 생성 git commit -am \u0026ldquo;[msg]\u0026rdquo; 스테이징 후 커밋 메시지와 함께 커밋 생성 *한 번 이상 커밋 한 파일만 가능 git commit --amend 마지막 커밋 메시지 수정 6) 커밋 기록 # Command Details git log 커밋 기록 보기 git log -p 커밋 기록과 패치내용 보기 git log --stat 커밋 기록과 패치통계 보기 git log --graph 커밋 기록과 그래프 보기 git log [branch]..[branch] 후자에만 있는 커밋 기록 보기 7) 되돌리기 # Command Details git reset --hard [commit] | HEAD[~n] 해당 커밋으로 되돌린 후이후의 커밋, 스테이징, 작업 초기화 git reset [commit] | HEAD[~n] 해당 커밋으로 되돌린 후이후의 커밋, 스테이징 초기화 git reset --soft [commit] | HEAD[~n] 해당 커밋으로 되돌린 후이후의 커밋 초기화 git revert [commit] 해당 커밋의 수정사항 취소 후 새 커밋 생성 git revert [commit]..[commit] 해당 범위의 수정사항 취소 후 새 커밋 생성 git rebase -i [commit] | HEAD[~n] p: 커밋 그냥 사용, 재정렬 및 삭제 가능r: 커밋 메시지 수정e: 커밋 메시지 및 내용 수정*HEAD가 해당 커밋으로 이동, 추가 작업 가능*git rebase --continue (작업 종료)*git rebase --abort (작업 중단)s: squash merged: 커밋 삭제 8) 임시 저장 # Command Details git stash (-u) 임시 저장 후 직전 커밋 상태로 되돌아감 (새 파일도)*한 번 이상 스테이징 한 파일만 가능 git stash list 임시 저장 목록 보기 git stash apply (stash@{[n]}) 최근(해당) 임시 저장 상태로 돌아가기 git stash drop (stash@{[n]}) 최근(해당) 임시 저장 상태 지우기 git stash pop 최근 임시 저장 상태 apply 후 drop 9) 브랜치 # Command Details git branch (-a) 브랜치 목록 보기 (원격 목록도) git branch [branch] 브랜치 생성 git branch -d [branch] 해당 브랜치 삭제 git branch -m [branch] [branch] 브랜치명 바꾸기 git checkout [branch] 브랜치 전환 git checkout -b [branch] 브랜치 생성 후 전환 git merge [branch] (--squash) 현재 브랜치에 해당 브랜치 병합 (스쿼시 병합) git rebase [branch] 현재 브랜치에 해당 브랜치 이어 붙이기 10) 삭제 # Command Details git rm (--cached) [file] 해당 파일 삭제 (원격에서만) git rm -r (--cached) [directory] 해당 폴더 삭제 (원격에서만) git fetch --all --prune 원격 브랜치 흔적 삭제 Etc # 1) .gitignore # List Details example.xxx 해당 파일명 전부 제외 /example.xxx 현재 폴더의 해당 파일 제외 example/ 해당 폴더와 하위 경로 제외 example/example.xxx 해당 폴더의 해당 파일 제외 *.xxx 특정 확장자 파일 전부 제외 !example.xxx 예외 파일명 (버전 관리 ON) 2) SSH 등록 # ssh-keygen으로 ~/.ssh/에 id_rsa.pub(공개키)와 id_rsa(개인키) 생성 공개키를 Github의 Settings/SSH and GPG keys에 등록 3) Github 계정 오류 # 키체인 접근 -\u0026gt; github.com ","date":"31 October 2022","permalink":"/posts/summary/git/","section":"Posts","summary":"1) 기본 설정 # Command Details git init 깃 추적 시작 git config --global --list 기본 설정 보기 git config --global core.","title":"Git"},{"content":"","date":"29 October 2022","permalink":"/categories/book/","section":"Categories","summary":"","title":"\u003cBook\u003e"},{"content":"","date":"29 October 2022","permalink":"/tags/convention/","section":"Tags","summary":"","title":"Convention"},{"content":" 개발자의 글쓰기는 \u0026lsquo;정확\u0026rsquo;하고 \u0026lsquo;간결\u0026rsquo;하고 \u0026lsquo;가독성\u0026rsquo;이 높아야 한다.\n1) 기초 # 두괄식 - 핵심 설명 후 부가 설명 구조화 - 들여쓰기 활용 Ps1. 함수명에 사용하는 영단어 뉘앙스 차이\nstop(중지) / restart(재개) end(종료) / start(시작) finish(완전 종료) / pause(일시 중지) / hold(의도를 지닌 중지) get(획득) / retrieve(검색 후 획득) / acquire(독점 획득) / fetch(다음 대상 획득) set(할당) / init(초기값 할당) create(틀을 만듦) / register(만들어진 틀에 입력) change(내용 변화) / modify(틀린 내용 수정) / revise(새로운 내용으로 개정) do(행동) / must(필수) / should(권고) is(boolean 데이터) Ps2. \u0026ldquo;-조사\u0026rdquo;, \u0026ldquo;-하다\u0026rdquo;, \u0026ldquo;숫자-\u0026rdquo;, \u0026ldquo;-기호-\u0026ldquo;만 붙여 쓰고 나머지는 띄어 씀\n2) 네이밍과 주석 # 기본적인 네이밍 컨벤션 클래스와 컴포넌트 - PascalCase\n함수와 변수 - camelCase\n상수 - UPPER_DELIMITER_CASE\n패키지와 모듈 - lowercase 명사+명사+명사 (변수) 형용사+명사+명사 (변수) 동사+명사+명사 (함수) BEM 클래스 표기법 - 대상__요소\u0026ndash;상태 변수명 명확한 의미(E.g. d, day(X) -\u0026gt; today, someday(O)) 복수형은 짧을 때는 \u0026ldquo;-s\u0026rdquo;, 길 때는 \u0026ldquo;listOf-\u0026ldquo;나 \u0026ldquo;arrayOf-\u0026ldquo;로 표현 함수명 필요한 기능을 문장으로 작성 함수는 시스템이 할 일이기 때문에 사용자가 할 일은 삭제 중복 내용을 삭제하며 문장 정리 후 분리 1함수 1기능 원칙으로 문장 재분리 기능별 함수 작성 이름이 기능을 명확하게 설명해야 함 설명이 안될 경우 함수를 더 분리해야 함 좋은 이름의 기준 SMART Easy to Search 고전적 범주화 E.g. userBuyer, userPayer, userRegister Easy to Mix 상위 태그와 조합 E.g. h1.title, h2.title, p.title Easy to Agree 구별할 필요가 없는 것까지 이름을 새로 지을 필요 없음 Easy to Remember 이미 널리 알려진 용어는 그냥 쓰는 것이 효율적 Easy to Type 입력하기 쉽고 오타를 낼 가능성이 적은 이름 주석 코드는 의미를, 주석은 의도를 주석은 디버깅으로 바로 잡을 수 없으니 개발자가 신경 써야 함 3) 에러 메시지와 선택지 # 에러의 내용, 원인, 해결법을 알려 줘야 함 \u0026ldquo;예 / 아니오\u0026rdquo; 보다는 구체적인 선택지를 제시 E.g. \u0026ldquo;페이지에 머물기 / 페이지에서 나가기\u0026rdquo; 순서에 일관성이 있어야 함 비활성화를 활용해 에러 예방 가능 4) 릴리스 문서와 장애 보고서 # a. 릴리즈 문서\n선정: 회사와 개발자가 말하고 싶은 것과 독자가 듣고 싶은 것 중 두 개 이상 만족하는 것 선정 분류: 독자에 따라 \u0026ldquo;개발 관점에서 비슷한 내용\u0026rdquo; 혹은 \u0026ldquo;사용 관점에서 비슷한 내용\u0026quot;으로 분류 요약: 불필요한 부사, 형용사, 조사, 어미 제거 종합: 종합은 분석의 개념화와 반대로 특징이나 결과로 서술 Ps. Semantic Versioning - major(호환 X).minor(새로운 기능).patch\nb. 장애 보고서\n문제, 문제점, 해결책, 후순 계획 순서로 작성 면책 조항 필수 필수, 권장, 선택, 예외 사항 표기 장애 보고서 구성 장애 내용 장애 영향 장애 원인 조치 사항 조치 결과 핵심 원인 향후 대책 장애의 근본 원인을 찾기 위해 원인의 원인을 계속 찾아라(5 whys) 재발을 막기 위해서는 원인 대신 이유를 묻고 사람 주어로 대답하라 개발 관점은 기능이 작동하지 않은 것, 비즈니스 관점은 손실이 발생한 것 모호하게 말고 정확한 정보를 적어라(E.g. 재발 가능성 30%) 5) 개발 가이드 # 서비스 개념을 범주, 용도, 특징으로 설명하라 용도는 범주의 핵심 기능을 써라 특징은 장점(자신 기준)과 강점(경쟁사와 비교)에서 뽑아 써라 이해를 돕기 위해 그림과 글로 묘사해라 주관적 묘사와 객관적 묘사를 둘 다 써라 의견을 쓰려면 근거를 대라 주장과 이유, 문제와 답의 거리를 좁혀라 순서에서 단계를 단계에서 목차를 만들어라 6) SI 제안서 # 고객의 문제인식이 중대하고 제안사의 문제 해결 능력이 탁월할 때, 경쟁사와 비교하여 강점들을 제안하라 고객의 문제인식이 중대하고 제안사의 문제 해결 능력이 부족할 때, 일단 동감하고 경쟁사와 다른 방안을 제시하라 고객의 문제인식이 사소하고 제안사의 문제 해결 능력이 탁월할 때, 고객이 문제를 중대하게 인식하게 만들어라 고객의 문제인식이 사소하고 제안사의 문제 해결 능력이 부족할 때, 경쟁사의 전략을 확인해서 대처하라 요구사항을 분석하지말고 제시하라 변화하는 요구사항에 대비하라 - Two Track(전체 검수와 기능별 검수) 개발 시간 대비 고객의 예상 만족도가 높은 것 위주로 개발하라 7) 기술 블로그 # 주제 의식을 버리고 소재 의식으로 쓰자 독자 수준이 아니라 자기 수준으로 쓰자 저 직접 경험하고 실험한 과정이나 결과*목차를 잘 잡고 본문부터 써라 술 어떤 것을 분석하여 의미를 풀이하고 해석한 것*원전을 비교하고 실험해 풀이해서 써라 편 산만하고 복잡한 자료를 편집해 질서를 부여한 것*순서를 요약해서 써라 집 여러 사람의 견해나 흩어진 자료를 한데 모아 정리한 것*자료를 모아 핵심을 엮어 써라 ","date":"29 October 2022","permalink":"/posts/book/%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-%EA%B8%80%EC%93%B0%EA%B8%B0/","section":"Posts","summary":"개발자의 글쓰기는 \u0026lsquo;정확\u0026rsquo;하고 \u0026lsquo;간결\u0026rsquo;하고 \u0026lsquo;가독성\u0026rsquo;이 높아야 한다.","title":"개발자의 글쓰기 - 김철수"}]