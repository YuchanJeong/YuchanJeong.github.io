[{"content":"Axios Instance # base url 설정, 헤더에 액세스 토큰 포함, 액세스 토큰 만료 시 재발급 그리고 리프레시 토큰 만료 시 로그아웃을 axiosInstance를 통해 공통 설정으로 처리했다.\nyarn add axios axiosInstance.ts import axios from \u0026#34;axios\u0026#34;; import { TOKEN_INFO, getAccessToken, logout } from \u0026#34;apis/account/account\u0026#34;; import type { ITokenInfo } from \u0026#34;apis/account/account.type\u0026#34;; import type { AxiosRequestConfig, AxiosResponse, AxiosError } from \u0026#34;axios\u0026#34;; // ========== Setting ========== // //# Set URL const config: AxiosRequestConfig = { baseURL: `https://${process.env.REACT_APP_BRANCH}.${process.env.REACT_APP_API}`, }; export const axiosInstance = axios.create(config); //# Set Authorization export const setAxiosHeader = (accessToken: string) =\u0026gt; { axiosInstance.defaults.headers.common.Authorization = `Bearer ${accessToken}`; }; // ========== Preprocessing ========== // //# Fulfilled Response (200번대 응답) const onFulfilled = (res: AxiosResponse): AxiosResponse =\u0026gt; { return res; }; //# Rejected Response (200번대 외 응답) const onRejected = async (err: AxiosError): Promise\u0026lt;AxiosResponse\u0026gt; =\u0026gt; { const { config, response } = err; if (!config) return Promise.reject(err); // [edge-case] 요청의 설정이 없을 시 //\u0026gt;\u0026gt; Access Token 만료 시 if (response?.status === 401) { const tokenInfoStr = localStorage.getItem(TOKEN_INFO); if (!tokenInfoStr) return Promise.reject(err); // [edge-case] Local Storage에 정보가 없을 시 const tokenInfo: ITokenInfo = JSON.parse(tokenInfoStr); try { // 0. Refresh Token으로 새로운 Access Token 획득 const newAccessToken = await getAccessToken(tokenInfo.refreshToken); // 1. 권한 부여 헤더의 Access Token 교체 setAxiosHeader(newAccessToken); // 2. Local Storage의 Access Token 교체 localStorage.setItem( TOKEN_INFO, JSON.stringify({ ...tokenInfo, accessToken: newAccessToken, }) ); // 3. 현재 요청의 Access Token 교체 if (!config.headers) config.headers = {}; // [edge-case] 요청에 헤더가 없을 시 config.headers.Authorization = `Bearer ${newAccessToken}`; return axiosInstance(config); } catch (err: unknown) { // [edge-case] Refresh Token 만료 시 logout(true); return Promise.reject(err); } } return Promise.reject(err); }; axiosInstance.interceptors.response.use(onFulfilled, onRejected); account/account.ts import { axiosInstance, setAxiosHeader } from \u0026#34;apis/axiosInstance\u0026#34;; import type { IAccountInfo, ILoginInfo, _IAccountInfo, _ILoginInfo, } from \u0026#34;./account.type\u0026#34;; export const TOKEN_INFO = \u0026#34;TOKEN_INFO\u0026#34;; export const EXPIRED = \u0026#34;EXPIRED\u0026#34;; export const logout = (isExpired?: boolean) =\u0026gt; { if (isExpired) { localStorage.setItem(EXPIRED, EXPIRED); } localStorage.removeItem(TOKEN_INFO); window.location.replace(window.location.origin); }; export const login = async (email: string, password: string): Promise\u0026lt;void\u0026gt; =\u0026gt; { const res = await axiosInstance.post\u0026lt;_ILoginInfo\u0026gt;(\u0026#34;...\u0026#34;, { email, password, }); const tokenInfo = { accessToken: res.data.result.access_token, refreshToken: res.data.result.refresh_token, }; setAxiosHeader(tokenInfo.accessToken); localStorage.setItem(TOKEN_INFO, JSON.stringify(tokenInfo)); localStorage.removeItem(EXPIRED); return; }; export const getAccessToken = async (refreshToken: string): Promise\u0026lt;string\u0026gt; =\u0026gt; { const res = await axiosInstance.post\u0026lt;Pick\u0026lt;ILoginInfo, \u0026#34;access_token\u0026#34;\u0026gt;\u0026gt;( \u0026#34;...\u0026#34;, { refresh_token: refreshToken } ); return res.data.access_token; }; export const getAccountInfo = async (): Promise\u0026lt;IAccountInfo\u0026gt; =\u0026gt; { const res = await axiosInstance.get\u0026lt;_IAccountInfo\u0026gt;(\u0026#34;...\u0026#34;); return res.data.account; }; account/account.type.ts export interface ITokenInfo { accessToken: string; refreshToken: string; } type TAccountType = ...; type TRegion = ...; type TAuthType = ...; export interface ILoginInfo { region: TRegion; auth_type: TAuthType; email: string; access_token: string; refresh_token: string; account_id: string; } export interface _ILoginInfo { result: ILoginInfo; } export interface IAccountInfo { account_id: string; account_type: TAccountType; email: string; region: TRegion; company: { id: number; name: string; }; } export interface _IAccountInfo { account: IAccountInfo; } React Query # yarn add @tanstack/react-query @tanstack/react-query-devtools index.tsx ... import { queryClient } from \u0026#34;queries/queryClient\u0026#34;; import React, { Suspense } from \u0026#34;react\u0026#34;; ... \u0026lt;QueryClientProvider client={queryClient}\u0026gt; \u0026lt;Suspense fallback={\u0026lt;Loading /\u0026gt;}\u0026gt; \u0026lt;App /\u0026gt; \u0026lt;/Suspense\u0026gt; \u0026lt;ReactQueryDevtools /\u0026gt; \u0026lt;/QueryClientProvider\u0026gt; ... queries/queryClient.tsx import { QueryClient } from \u0026#34;@tanstack/react-query\u0026#34;; import { queryErrorHandler } from \u0026#34;./queryErrorHandler\u0026#34;; const generateQueryClient = (): QueryClient =\u0026gt; { return new QueryClient({ defaultOptions: { queries: { staleTime: Infinity, cacheTime: 0, retry: false, // 여러 번 시도하면 사용자가 느리다고 느낌 suspense: true, onError: queryErrorHandler, }, mutations: { onError: queryErrorHandler, }, }, }); }; export const queryClient = generateQueryClient(); queries/queryErrorHandler.ts import { AxiosError } from \u0026#34;axios\u0026#34;; import { QUERY_ERROR_KEY } from \u0026#34;../keys/queryKey\u0026#34;; export const queryErrorHandler = (error: unknown): void =\u0026gt; { if (error instanceof AxiosError) { switch (error.response?.data.code) { case QUERY_ERROR_KEY.example: console.log(\u0026#34;예시 에러\u0026#34;, error); break; default: console.log(\u0026#34;서버 에러1\u0026#34;, error); break; } } else { console.log(\u0026#34;서버 에러2\u0026#34;, error); } }; ","date":"13 November 2022","permalink":"/posts/work/5/","section":"Posts","summary":"Axios Instance # base url 설정, 헤더에 액세스 토큰 포함, 액세스 토큰 만료 시 재발급 그리고 리프레시 토큰 만료 시 로그아웃을 axiosInstance를 통해 공통 설정으로 처리했다.","title":"[프로젝트 초기 설정] Axios Instance \u0026 React Query"},{"content":"","date":"13 November 2022","permalink":"/categories/work/","section":"Categories","summary":"","title":"\u003cwork\u003e"},{"content":"","date":"13 November 2022","permalink":"/tags/axios/","section":"Tags","summary":"","title":"axios"},{"content":"","date":"13 November 2022","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"13 November 2022","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"13 November 2022","permalink":"/tags/react-query/","section":"Tags","summary":"","title":"react-query"},{"content":"","date":"13 November 2022","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":" A blog from a developer who loves \u0026ldquo;Why?\u0026rdquo; :) Previous posts are in this repository. 😊 About me # Name Yuchan Jeong Work WithBecon(FE Developer) Languages Korean(Native), English(Intermediate) 👇 Follow me on # Mobile Number +82 10 8295 2674 E-mail yuchanjeong0923@gmail.com Blog https://yuchanjeong.github.io Github /yuchanjeong ","date":"13 November 2022","permalink":"/","section":"Yuchan's hello world!","summary":"A blog from a developer who loves \u0026ldquo;Why?","title":"Yuchan's hello world!"},{"content":"코드 스플리팅 # 리액트에서 활용 가능한 여러 방식의 코드 스플리팅이 있지만 우선 회사의 다른 프로젝트에서 사용하고 있는 loadable component를 활용한 페이지(라우팅) 기반의 코드 스플리팅만 적용 했다.\nyarn add @loadable/component @types/loadable__component App.tsx\nimport loadable from \u0026#34;@loadable/component\u0026#34;; ... const ExamplePage = loadable(() =\u0026gt; import(\u0026#34;pages/ExamplePage\u0026#34;)) ... function App() { return ( \u0026lt;Router\u0026gt; \u0026lt;Routes\u0026gt; \u0026lt;Route path=\u0026#34;/example\u0026#34; element={\u0026lt;ExamplePage /\u0026gt;} /\u0026gt; ... \u0026lt;Route path=\u0026#34;*\u0026#34; element={\u0026lt;NotFound /\u0026gt;} /\u0026gt; \u0026lt;/Routes\u0026gt; \u0026lt;/Router\u0026gt; ) } SASS(SCSS) # main.scss\n// ========== 1. reset =========== // @import \u0026#34;reset\u0026#34;; // ========== 2. constants =========== // @import \u0026#34;constants/colors\u0026#34;; @import \u0026#34;constants/fonts\u0026#34;; // ========== 3. basic =========== // @import \u0026#34;basic\u0026#34;; // ========== 4. mixins =========== // @import \u0026#34;mixins/flexBox\u0026#34;; @import \u0026#34;mixins/font\u0026#34;; _reset.scss * { margin: 0; padding: 0; font: inherit; color: inherit; } *, :after, :before { box-sizing: border-box; flex-shrink: 0; } :root { line-height: 1.5; -moz-tab-size: 4; tab-size: 4; cursor: default; // 모바일에서 꾹 클릭 시 색상 변경 방지 -webkit-tap-highlight-color: transparent; // 내용 선택 방지 -webkit-touch-callout: none; -webkit-user-select: none; -ms-user-select: none; user-select: none; // 모바일에서 폰트 크기 조정 방지 -webkit-text-size-adjust: 100%; -moz-text-size-adjust: 100%; text-size-adjust: 100%; // 글이 상자 벗어나는 거 방지 overflow-wrap: break-word; word-break: break-all; // 폰트 랜더링 부드럽게 만들기 -moz-osx-font-smoothing: grayscale; -webkit-font-smoothing: antialiased; } html, body { height: 100%; // 최상위 부모 요소 기본 크기 설정 font-size: 62.5%; // 1rem === 10px font-weight: 400; font-style: normal; } img, picture, video, canvas, svg { // 위치값을 가지고 상자 벗어나는거 방지 display: block; max-width: 100%; } //# Chrome 자동 완성 배경색 지우기 input:-webkit-autofill { box-shadow: 0 0 0 30px transparent inset; } input:-webkit-autofill, input:-webkit-autofill:hover, input:-webkit-autofill:focus, input:-webkit-autofill:active { transition: background-color 5000s ease-in-out 0s; } //# 선택 및 입력 스타일 초기화 button, input, select { background-color: transparent; border: 0; \u0026amp;:focus, \u0026amp;:active { outline: none; box-shadow: none; } } textarea { \u0026amp;:focus, \u0026amp;:active { box-shadow: none; outline: none; } } //# 입력 대상 커서 텍스트로 변경 input, textarea { cursor: text; } //# 선택 대상 커서 포인터로 변경 button, select, input[type=\u0026#34;checkbox\u0026#34;], input[type=\u0026#34;radio\u0026#34;], input[type=\u0026#34;range\u0026#34;], label { cursor: pointer; } //# 링크 스타일 초기화 및 커서 포인터로 변경 a { text-decoration: none; cursor: pointer; } //# 표 스타일 초기와 table { border-collapse: collapse; border-spacing: 0; } //# 목록 스타일 초기화 ul, ol { padding-left: 0; list-style: none; } _basic.scss body { font-family: $font-main; font-size: 1.6rem; color: $color-primary-black; background-color: $color-gray-light-2; } constants/_colors.scss //# primary color $color-primary-purple: #6435c7; $color-primary-black: #000000; $color-primary-purple-dark: #351083; $color-primary-lavender: #eeedef; $color-primary-light: #f4eeff; //# secondary color $color-secondary-yellow: #ffa500; $color-secondary-orange: #fd5e02; $color-secondary-red: #ff0000; $color-secondary-light: #fbece4; //# gray color $color-gray-dark-gray-deep: #3d3d3d; $color-gray-dark-gray: #727272; $color-gray-medium-gray: #939393; $color-gray-original: #afafaf; $color-gray-light: #cecece; $color-gray-light-2: #f8f8f8; $color-gray-white: #ffffff; constants/_fonts.scss $font-main: \u0026#34;Noto Sans KR\u0026#34;, sans-serif; $font-sub: \u0026#34;S-Core Dream-4\u0026#34;, sans-serif; mixins/_flexBox.scss $flex-position-map: ( start: flex-start, end: flex-end, between: space-between, around: space-around, stretch: stretch, center: center, ); @mixin flex-box-j-a-g($justify-content: center, $align-items: center, $gap: 0) { display: flex; justify-content: map-get($flex-position-map, $justify-content); align-items: map-get($flex-position-map, $align-items); gap: $gap; @content; } @mixin flex-box-column-j-a-g( $justify-content: center, $align-items: center, $gap: 0 ) { display: flex; flex-direction: column; justify-content: map-get($flex-position-map, $justify-content); align-items: map-get($flex-position-map, $align-items); gap: $gap; @content; } ; mixins/_font.scss @mixin font-size-color-weight-style( $size: inherit, $color: inherit, $weight: 400, $style: normal ) { font-size: $size; color: $color; font-weight: $weight; font-style: $style; @content; } *_(underscore)를 scss 파일 이름 앞에 붙일 경우 부분 파일로 취급해서 작업 시점에는 모듈화되어 있지만 실제로 사용되는 시점에는 main.scss 파일 하나에 작성된다.\nReference.\n코드 스플리팅 https://velog.io/@velopert/react-code-splitting SCSS https://www.joshwcomeau.com/css/custom-css-reset/ 2022 CSS Reset 다시 써보기! [css-real] 드래그(drag) 막기 ","date":"12 November 2022","permalink":"/posts/work/4/","section":"Posts","summary":"코드 스플리팅 # 리액트에서 활용 가능한 여러 방식의 코드 스플리팅이 있지만 우선 회사의 다른 프로젝트에서 사용하고 있는 loadable component를 활용한 페이지(라우팅) 기반의 코드 스플리팅만 적용 했다.","title":"[프로젝트 초기 설정] 코드 스플리팅 \u0026 SASS"},{"content":"","date":"12 November 2022","permalink":"/tags/react/","section":"Tags","summary":"","title":"react"},{"content":"","date":"12 November 2022","permalink":"/tags/sass/","section":"Tags","summary":"","title":"sass"},{"content":"배경 # 다른 팀원들이 기존 업무로 바빴기 때문에 신규 B2B 프로젝트에 나만 우선 투입되었다. (\u0026ldquo;곧 신규 프로젝트를 시작할 것이고 이 신규 프로젝트를 주도적으로 이끌어 나갈 수 있을 것이다.\u0026ldquo;라고 면접 때 들었고 이것이 내가 이 회사를 선택한 주된 이유 중 하나이기도 해서 매우 기대가 됨) 효율적인 협업을 위해 eslint(linter)와 prettier(formatter)로 코드 스타일을 맞추고 이를 효율적으로 확실히 지키기 위해 lint-staged(변경된 파일만 lint 검사)와 husky(git hook 공유)를 사용했다.\n1) 프로젝트 시작 # yarn create-react-app [project name] --template typescript 2) ESLint와 Prettier 적용 # yarn add eslint prettier eslint-config-prettier eslint-plugin-import @typescript-eslint/parser eslint-import-resolver-typescript -D npx eslint --init ✔ How would you like to use ESLint? · problems ✔ What type of modules does your project use? · esm ✔ Which framework does your project use? · react ✔ Does your project use TypeScript? · No / Yes ✔ Where does your code run? · browser ✔ What format do you want your config file to be in? · JSON The config that you\u0026#39;ve selected requires the following dependencies: eslint-plugin-react@latest @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest ✔ Would you like to install them now? · No / Yes ✔ Which package manager do you want to use? · yarn .eslintrc.json { \u0026#34;env\u0026#34;: { \u0026#34;browser\u0026#34;: true, \u0026#34;es2021\u0026#34;: true }, \u0026#34;extends\u0026#34;: [ \u0026#34;eslint:recommended\u0026#34;, \u0026#34;plugin:react/recommended\u0026#34;, \u0026#34;plugin:@typescript-eslint/recommended\u0026#34;, \u0026#34;plugin:import/typescript\u0026#34;, \u0026#34;plugin:import/recommended\u0026#34;, \u0026#34;prettier\u0026#34; ], \u0026#34;overrides\u0026#34;: [], \u0026#34;parser\u0026#34;: \u0026#34;@typescript-eslint/parser\u0026#34;, \u0026#34;parserOptions\u0026#34;: { \u0026#34;ecmaVersion\u0026#34;: \u0026#34;latest\u0026#34;, \u0026#34;sourceType\u0026#34;: \u0026#34;module\u0026#34; }, \u0026#34;plugins\u0026#34;: [\u0026#34;react\u0026#34;, \u0026#34;@typescript-eslint\u0026#34;], \u0026#34;settings\u0026#34;: { \u0026#34;import/resolver\u0026#34;: { \u0026#34;node\u0026#34;: {}, \u0026#34;typescript\u0026#34;: { \u0026#34;directory\u0026#34;: \u0026#34;./src\u0026#34; } }, \u0026#34;import/parsers\u0026#34;: { \u0026#34;@typescript-eslint/parser\u0026#34;: [\u0026#34;.ts\u0026#34;, \u0026#34;.tsx\u0026#34;] } }, \u0026#34;rules\u0026#34;: { \u0026#34;react/react-in-jsx-scope\u0026#34;: 0, \u0026#34;import/order\u0026#34;: [ \u0026#34;error\u0026#34;, { \u0026#34;groups\u0026#34;: [ \u0026#34;builtin\u0026#34;, \u0026#34;external\u0026#34;, \u0026#34;internal\u0026#34;, [\u0026#34;parent\u0026#34;, \u0026#34;sibling\u0026#34;, \u0026#34;index\u0026#34;], \u0026#34;type\u0026#34;, \u0026#34;unknown\u0026#34; ], \u0026#34;pathGroups\u0026#34;: [ { \u0026#34;pattern\u0026#34;: \u0026#34;./*.scss\u0026#34;, \u0026#34;group\u0026#34;: \u0026#34;type\u0026#34;, \u0026#34;position\u0026#34;: \u0026#34;after\u0026#34; } ], \u0026#34;alphabetize\u0026#34;: { \u0026#34;order\u0026#34;: \u0026#34;asc\u0026#34;, \u0026#34;caseInsensitive\u0026#34;: true }, \u0026#34;newlines-between\u0026#34;: \u0026#34;always\u0026#34; } ], \u0026#34;import/no-unresolved\u0026#34;: \u0026#34;off\u0026#34;, \u0026#34;import/export\u0026#34;: \u0026#34;off\u0026#34; } } .prettierrc.json { \u0026#34;arrowParens\u0026#34;: \u0026#34;always\u0026#34;, \u0026#34;bracketSpacing\u0026#34;: true, \u0026#34;htmlWhitespaceSensitivity\u0026#34;: \u0026#34;css\u0026#34;, \u0026#34;insertPragma\u0026#34;: false, \u0026#34;jsxBracketSameLine\u0026#34;: false, \u0026#34;jsxSingleQuote\u0026#34;: false, \u0026#34;printWidth\u0026#34;: 80, \u0026#34;proseWrap\u0026#34;: \u0026#34;preserve\u0026#34;, \u0026#34;quoteProps\u0026#34;: \u0026#34;as-needed\u0026#34;, \u0026#34;requirePragma\u0026#34;: false, \u0026#34;semi\u0026#34;: true, \u0026#34;singleQuote\u0026#34;: false, \u0026#34;tabWidth\u0026#34;: 2, \u0026#34;trailingComma\u0026#34;: \u0026#34;all\u0026#34;, \u0026#34;useTabs\u0026#34;: false, \u0026#34;vueIndentScriptAndStyle\u0026#34;: false } 3) Lint-Staged와 Husky 적용 # npx mrm lint-staged package.json { ..., \u0026#34;lint-staged\u0026#34;: { \u0026#34;*.{js,jsx,ts,tsx}\u0026#34;: [ \u0026#34;prettier --write\u0026#34;, \u0026#34;eslint --fix\u0026#34; ] } } npx husky-init .husky/pre-commit #!/usr/bin/env sh . \u0026#34;$(dirname -- \u0026#34;$0\u0026#34;)/_/husky.sh\u0026#34; yarn lint-staged ❗️node_modules를 재설치 할 경우 다시 해줘야 함\n","date":"11 November 2022","permalink":"/posts/work/3/","section":"Posts","summary":"배경 # 다른 팀원들이 기존 업무로 바빴기 때문에 신규 B2B 프로젝트에 나만 우선 투입되었다.","title":"[프로젝트 초기 설정] 협업 준비"},{"content":"","date":"11 November 2022","permalink":"/tags/eslint/","section":"Tags","summary":"","title":"eslint"},{"content":"","date":"11 November 2022","permalink":"/tags/husky/","section":"Tags","summary":"","title":"husky"},{"content":"","date":"11 November 2022","permalink":"/tags/lint-staged/","section":"Tags","summary":"","title":"lint-staged"},{"content":"","date":"11 November 2022","permalink":"/tags/prettier/","section":"Tags","summary":"","title":"prettier"},{"content":"","date":"11 November 2022","permalink":"/tags/typescript/","section":"Tags","summary":"","title":"typescript"},{"content":"","date":"7 November 2022","permalink":"/categories/summary/","section":"Categories","summary":"","title":"\u003csummary\u003e"},{"content":"\ruseInput.ts\rimport { useState } from \u0026#34;react\u0026#34;; import type { ChangeEvent, Dispatch, SetStateAction } from \u0026#34;react\u0026#34;; export interface IUseInputResult { attribute: { value: string; placeholder: string; onChange: ( event: ChangeEvent\u0026lt;HTMLInputElement | HTMLTextAreaElement\u0026gt; ) =\u0026gt; void; }; value: string; setValue: Dispatch\u0026lt;SetStateAction\u0026lt;string\u0026gt;\u0026gt;; } /** * @param initialValue ? 초기값; `\u0026#34;\u0026#34;` * @param placeholder ? 표시자; `\u0026#34;\u0026#34;` * @returns `{ attribute, value, setValue }` */ export const useInput = ( initialValue = \u0026#34;\u0026#34;, placeholder = \u0026#34;\u0026#34; ): IUseInputResult =\u0026gt; { const [value, setValue] = useState(initialValue); const onChange = ( event: ChangeEvent\u0026lt;HTMLInputElement | HTMLTextAreaElement\u0026gt; ): void =\u0026gt; { setValue(event.target.value); }; return { attribute: { value, placeholder, onChange }, value, setValue, }; }; // ========== usage ========== // /* const exampleInput = useInput(\u0026#34;\u0026#34;, \u0026#34;\u0026#34;) return ( \u0026lt;input {...exampleInput.attribute} /\u0026gt;` ) */ useRange.ts\rimport { useState } from \u0026#34;react\u0026#34;; import type { ChangeEvent, Dispatch, SetStateAction } from \u0026#34;react\u0026#34;; export interface IUseRangeResult { attribute: { type: \u0026#34;range\u0026#34;; value: number; min: number; max: number; step: number; onChange: (event: ChangeEvent\u0026lt;HTMLInputElement\u0026gt;) =\u0026gt; void; }; value: number; setValue: Dispatch\u0026lt;SetStateAction\u0026lt;number\u0026gt;\u0026gt;; } /** * @param initialValue ? 초기값; `0` * @param minValue ? 최솟값; `0` * @param maxValue ? 최댓값; `100` * @param step ? 단계값; `1` * @returns `{ attribute, value, setValue }` */ export const useRange = ( initialValue = 0, minValue = 0, maxValue = 100, step = 1 ): IUseRangeResult =\u0026gt; { const [value, setValue] = useState(initialValue); const onChange = (event: ChangeEvent\u0026lt;HTMLInputElement\u0026gt;): void =\u0026gt; { setValue(Number(event.target.value)); }; return { attribute: { type: \u0026#34;range\u0026#34;, value, min: minValue, max: maxValue, step, onChange, }, value, setValue, }; }; // ========== usage ========== // /* const exampleRange = useRange() return ( \u0026lt;input {...exampleRange.attribute} /\u0026gt;` ) */ useCheckbox.ts\rimport { useState } from \u0026#34;react\u0026#34;; import type { ChangeEvent, Dispatch, SetStateAction } from \u0026#34;react\u0026#34;; export interface IUseCheckboxResult { attribute: { type: \u0026#34;checkbox\u0026#34;; onChange: (event: ChangeEvent\u0026lt;HTMLInputElement\u0026gt;) =\u0026gt; void; }; checkedList: string[]; setCheckedList: Dispatch\u0026lt;SetStateAction\u0026lt;string[]\u0026gt;\u0026gt;; } /** * @param allList 체크 박스에 포함할 요소 값들 * @param limit ? 체크 가능 개수; `null` * @param initialCheckedList ? 초기에 체크되어 있는 요소 값들; `[]` * @returns `{ attribute, checkedList, setCheckedList }` */ export const useCheckbox = ( allList: string[], limit: number | null = null, initialCheckedList?: string[] ): IUseCheckboxResult =\u0026gt; { const [checkedList, setCheckedList] = useState(initialCheckedList || []); const onChange = ( event: ChangeEvent\u0026lt;HTMLInputElement | HTMLTextAreaElement\u0026gt; ): void =\u0026gt; { const value = event.target.value; if (value === \u0026#34;allCheck\u0026#34;) { if (limit !== null) return; if (checkedList.length === allList.length) { setCheckedList([]); } else { setCheckedList([...allList]); } return; } if (checkedList.includes(value)) { setCheckedList((prevCheckedList) =\u0026gt; prevCheckedList.filter((checkedValue) =\u0026gt; checkedValue !== value) ); } else { if (limit !== null \u0026amp;\u0026amp; checkedList.length \u0026gt;= limit) { setCheckedList((prevCheckedList) =\u0026gt; [ ...prevCheckedList.filter((_, idx) =\u0026gt; idx !== 0), ]); } setCheckedList((prevCheckedList) =\u0026gt; [...prevCheckedList, value]); } }; return { attribute: { type: \u0026#34;checkbox\u0026#34;, onChange }, checkedList, setCheckedList, }; }; // ========== usage ========== // /* const EXAMPLES = [\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;c\u0026#34;] const EXAMPLE_LABELS: { [key: string]: string } = { \u0026#34;a\u0026#34;: \u0026#34;가\u0026#34;, \u0026#34;b\u0026#34;: \u0026#34;나\u0026#34;, \u0026#34;c\u0026#34;: \u0026#34;다\u0026#34;, } const exampleCheckbox = useCheckbox(EXAMPLES) return ( \u0026lt;div\u0026gt; \u0026lt;label data-is-checked={ EXAMPLES.length === exampleCheckbox.checkedList.length } \u0026gt; 전체 선택 \u0026lt;input {...exampleCheckbox.attribute} value=\u0026#34;allCheck\u0026#34; checked={EXAMPLES.length === exampleCheckbox.checkedList.length} /\u0026gt; \u0026lt;/label\u0026gt; {EXAMPLES.map((example) =\u0026gt; ( \u0026lt;label key={example} data-is-checked={exampleCheckbox.checkedList.includes(example)} \u0026gt; {EXAMPLE_LABELS[example]} \u0026lt;input {...exampleCheckbox.attribute} value={example} checked={exampleCheckbox.checkedList.includes(example)} /\u0026gt; \u0026lt;/label\u0026gt; ))} \u0026lt;div\u0026gt;{exampleCheckbox.checkedList}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ) */ /* input[type=\u0026#34;checkbox\u0026#34;] { display: none; } label { ... \u0026amp;[data-is-checked=\u0026#34;true\u0026#34;] { ... } } */ useSelect.ts\rimport { useState } from \u0026#34;react\u0026#34;; import type { ChangeEvent, Dispatch, SetStateAction } from \u0026#34;react\u0026#34;; export interface IUseSelectResult { attribute: { value: string; onChange: (event: ChangeEvent\u0026lt;HTMLSelectElement\u0026gt;) =\u0026gt; void; }; value: string; setValue: Dispatch\u0026lt;SetStateAction\u0026lt;string\u0026gt;\u0026gt;; } /** * @param initialValue ? 초기값; `\u0026#34;\u0026#34;` * @returns `{ attribute, value, setValue }` */ export const useSelect = (initialValue = \u0026#34;\u0026#34;): IUseSelectResult =\u0026gt; { const [value, setValue] = useState(initialValue); const onChange = (event: ChangeEvent\u0026lt;HTMLSelectElement\u0026gt;) =\u0026gt; { if (event.target.value !== value) setValue(event.target.value); }; return { attribute: { value, onChange }, value, setValue, }; }; // ========== usage ========== // /* const EXAMPLES = [ [\u0026#34;a\u0026#34;, \u0026#34;가\u0026#34;], [\u0026#34;b\u0026#34;, \u0026#34;나\u0026#34;], [\u0026#34;c\u0026#34;, \u0026#34;다\u0026#34;], ] const exampleSelect = useSelect(EXAMPLES[0][0]) return ( \u0026lt;select {...exampleSelect.attribute}\u0026gt; {EXAMPLES.map((example) =\u0026gt; ( \u0026lt;option key={example[0]} value={example[0]}\u0026gt; {example[1]} \u0026lt;/option\u0026gt; ))} \u0026lt;/ select\u0026gt; ) */ useIntersectionObserver.ts\rimport { useEffect, useState } from \u0026#34;react\u0026#34;; import type { RefObject } from \u0026#34;react\u0026#34;; /** * @param targetRef 관측 대상 * @param targetMargin ? 관측 범위; `\u0026#34;0%\u0026#34;` * @param isFreezeOnceVisible ? 한번 이상 관측 안 함 여부; `false` * @returns 관측 여부 */ export const useIntersectionObserver = ( targetRef: RefObject\u0026lt;HTMLDivElement\u0026gt;, targetMargin = \u0026#34;0%\u0026#34;, isFreezeOnceVisible = false ): boolean =\u0026gt; { const [entry, setEntry] = useState\u0026lt;IntersectionObserverEntry\u0026gt;(); const isFrozen = entry?.isIntersecting \u0026amp;\u0026amp; isFreezeOnceVisible; const updateEntry = ([entry]: IntersectionObserverEntry[]): void =\u0026gt; { setEntry(entry); }; useEffect(() =\u0026gt; { const target = targetRef?.current; const hasIOSupport = !!window.IntersectionObserver; if (!hasIOSupport || isFrozen || !target) return; const observerParams = { threshold: 0, root: null, rootMargin: targetMargin, }; const observer = new IntersectionObserver(updateEntry, observerParams); observer.observe(target); return () =\u0026gt; observer.disconnect(); }, [targetRef?.current, targetMargin, isFrozen]); return !!entry?.isIntersecting; }; // ========== usage ========== // /* const exampleRef = useRef\u0026lt;HTMLDivElement\u0026gt;(null); const isVisible = useIntersectionObserver(exampleRef); return ( \u0026lt;div\u0026gt; \u0026lt;div\u0026gt;{isVisible ? \u0026#34;보임\u0026#34; : \u0026#34;안보임\u0026#34;}\u0026lt;/div\u0026gt; \u0026lt;div ref={exampleRef}\u0026gt;example\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ) */ useDetectOutsideClick.ts\rimport { useState, useEffect } from \u0026#34;react\u0026#34;; import type { Dispatch, SetStateAction, RefObject } from \u0026#34;react\u0026#34;; export type TUseDetectOutsideClickResult = [ boolean, Dispatch\u0026lt;SetStateAction\u0026lt;boolean\u0026gt;\u0026gt; ]; /** * @param targetRef 관측 대상 * @param initialValue ? 초기값; `false` * @returns `[isOpen, setIsOpen]` * */ export const useDetectOutsideClick = ( targetRef: RefObject\u0026lt;HTMLDivElement\u0026gt;, initialValue = false ): TUseDetectOutsideClickResult =\u0026gt; { const [isOpen, setIsOpen] = useState(initialValue); useEffect(() =\u0026gt; { const onClick = (event: MouseEvent) =\u0026gt; { if ( targetRef.current !== null \u0026amp;\u0026amp; !targetRef.current.contains(event.target as Node) ) { setIsOpen(false); } }; if (isOpen) { window.addEventListener(\u0026#34;click\u0026#34;, onClick); } return () =\u0026gt; { window.removeEventListener(\u0026#34;click\u0026#34;, onClick); }; }, [isOpen]); return [isOpen, setIsOpen]; }; // ========== usage ========== // /* const exampleRef = useRef\u0026lt;HTMLDivElement\u0026gt;(null); const [isOpen, setIsOpen] = useDetectOutsideClick(exampleRef); const openModal = () =\u0026gt; { setIsOpen(true); }; return ( \u0026lt;div ref={exampleRef}\u0026gt; \u0026lt;div onClick={openModal}\u0026gt;열기\u0026lt;/div\u0026gt; {isOpen ? \u0026lt;div\u0026gt;모달\u0026lt;/div\u0026gt; : null} \u0026lt;/div\u0026gt; ); */ useImageElement.ts\rimport { useEffect, useState } from \u0026#34;react\u0026#34;; export const useImageElement = ( url: string ): [HTMLImageElement | undefined, boolean] =\u0026gt; { const [imageElement, setImageElement] = useState\u0026lt;HTMLImageElement\u0026gt;(); const [isErr, setIsErr] = useState\u0026lt;boolean\u0026gt;(false); useEffect(() =\u0026gt; { const image = new window.Image(); image.src = url; image.crossOrigin = \u0026#34;anonymous\u0026#34;; image.onload = () =\u0026gt; { setImageElement(image); }; image.onerror = () =\u0026gt; { setIsErr(true); }; }, [url]); return [imageElement, isErr]; }; ","date":"7 November 2022","permalink":"/posts/summary/custom-hooks/","section":"Posts","summary":"useInput.","title":"Custom Hooks"},{"content":"","date":"6 November 2022","permalink":"/tags/convention/","section":"Tags","summary":"","title":"convention"},{"content":"배경 # 입사 직후 팀원들에게 코드 컨벤션을 물어보자 딱히 정해진 것이 없다는 답변을 들었다. 자세히 들어보자 도입은 하고 싶었으나 시간이 부족했고, 두 명뿐이다 보니 (거기다 바로 옆자리) 실시간으로 소통하면서 코딩이 가능해서 별로 불편하지 않았다고 한다.\n하지만 이제 세명이 되었고 (거기다 내 자리는 떨어져 있음) 나는 원래 개인 프로젝트를 할 때조차 자체 컨벤션을 정하고 지키기 위해 노력하면서 코딩을 하는 스타일이라 컨벤션을 정해보자고 제안하였다. 두 분도 원래 새로운 분이 오면 정할 예정이었다고 해서 프런트 팀의 첫 협업은 컨벤션 정하기로 낙점되었다.\n두 분은 론칭을 앞둔 프로젝트가 업무로 있어서 바빴기 때문에 상대적으로 한가한 내가 (첫 주에 떨어진 업무는 네이버 페이 적용과 각종 자잘한 에러 해결 및 개선 사항 적용이 끝이었음) 기존에 사용하던 컨벤션과 두 분이 작성하신 코드 그리고 인터넷 검색으로 얻은 각종 컨벤션을 참조하여 문서화를 하였고 이를 바탕으로 회의를 통해 컨벤션을 최종 결정하였다.\n특히 가장 어려웠고 신경 썼던 부분은 폴더의 구조인데 첫 회의에서 정한 내용을 다시 문서화하는 과정에서 모호한 부분이 많다는 점을 깨달았다. 규칙에 예외 사항이 너무 많아서 규칙이 길어지게 되고 작업 과정에서 충돌이 일어날 가능성도 많이 보였다. 이를 해결하기 위해 더미 프로젝트로 여러 컨벤션의 폴더 구조를 직접 재현해 보았고, 이를 바탕으로 다시 한번 회의를 통해 현재 우리에게 가장 적합한 폴더 구조를 결정하였다.\nPs. 우리가 정한 컨벤션은 완벽하지 않고 (물론 취향의 차이도 있고) 언제든지 바꿔 나갈 수 있다고 생각한다. 그럼에도 컨벤션이 있는 편이 협업의 과정에서 소통의 비용을 줄여주고, 추후 코드의 파악과 유지 보수에 도움이 된다고 생각하다. 또한 불편한 점들이 쌓여서 이를 바탕으로 개선할 수도 있는데 만약 컨벤션이 없이 각자 알아서 불편함을 해결한다면 나중에는 어떤 것을 개선해야 하는지 그리고 개선했는지도 모르는 어지러운 상태가 될 것이라고 생각한다.\n컨벤션 # 1. 네이밍 # Type Case 파일 및 폴더 camelCase*컴포넌트 파일 및 폴더는 PascalCase 상수 UPPER_DELIMITER_CASE\n*배열: \u0026ldquo;-_LIST\u0026rdquo; 권장*객체: \u0026ldquo;-_INFO\u0026rdquo; 권장 변수 camelCase[명사]*배열: \u0026ldquo;-List\u0026rdquo; 권장*객체: \u0026ldquo;-Info\u0026rdquo;, \u0026ldquo;-Infos\u0026rdquo; 권장 함수 camelCase[동사]*서버 통신 함수는 앞에 method 종류 붙히기 클래스(tsx, scss) camelCase*하위 클래스는 \u0026ldquo;_\u0026ldquo;로 연결 / e.g. filledBtn_black 스타일(scss) kebab-case 브랜치 camelCase 타입 PascalCase*interface: \u0026ldquo;I-\u0026quot;*type: \u0026ldquo;T-\u0026rdquo; 2. 주석 # 코드는 의미를, 주석은 의도를 (개발자의 글쓰기 - 김철수)\n// 일반적인 설명 //TODO: 추가 작업 필요 // ========== 대구분 ========== // //# 첫 번째 구분 //\u0026gt;\u0026gt; 두 번째 구분 //--| 세 번째 구분 //---- 네 번째 구분 //..... 다섯 번째 구분 /** export 하는 대상 */ *주석은 디버깅이 불가능하기 때문에 필요한 경우만 사용하고 지속적으로 관리해야 함\n3. 커밋 메시지 # [type] content # ---------- # [add] 기능 추가 / e.g. [add] 로그인 기능 추가: 자체 로그인, Kakao 소셜 로그인 # [delete] 기능 삭제 / e.g. [delete] Kakao 소셜 로그인 기능 삭제 # [update] 기능 개선 / e.g. [update] 자체 로그인에 성별 입력 추가 # [change] 기능 변경 / e.g. [change] 로그인 유효성 검사 조건 변경 # [modify] 기능 변경 없는 코드 변경 / e.g. [modify] 단순 주석 및 변수명 변경 # [fix] 문제 해결 / e.g. [fix] 비밀번호 대소문자 미구분 문제 해결 # [setting] 설치 및 설정 / e.g. [setting] 리덕스 설치 및 초기 설정 # [style] 스타일 관련 작업 / e.g. [style] 자체 로그인 페이지 스타일 적용 # [docs] 문서 관련 작업 / e.g. [docs] README.md 수정 # [test] 테스트 코드 / e.g. [test] 결제 기능 테스트 코드 추가 # [temp] 임시 작업 / e.g. [temp] 결제 기능 확인용 임시 코드 추가 # [chore] 기타 작업 / e.g. [chore] 빌드파일 수정 # ---------- # 개조식으로 작성 # \u0026#34;어떻게\u0026#34;가 아닌 \u0026#34;무엇\u0026#34;을 설명, 필요할 경우 \u0026#34;왜\u0026#34;도 설명 # 내용이 필요할 경우 제목에서 한 줄 띄우고 작성 # 내용이 여러 줄일 때는 \u0026#34;-\u0026#34;로 구분 # ---------- # \u0026#34;... 추가\u0026#34;는 [add], \u0026#34;...에 ... 추가\u0026#34;는 [update] # 살펴볼 필요가 없는 경우에는 \u0026#34;단순\u0026#34; 키워드 사용 # [hotfix], [i18n], [refactor] 등 분류가 명확한 커스텀 태그 사용 가능 *커밋 템플릿 추가 방법\n# 1. 작성 vim ~/.gitmessage.txt # 2. 등록 git config --global commit.template ~/.gitmessage.txt 4. 브랜치 + PR # Branch Type Desc deploy/prd 배포 중인 메인 브랜치 deploy/stg 배포 중인 개발 브랜치*deploy/drd에 PR(제목 \u0026ldquo;Deploy\u0026rdquo;) 후 Rebase Merge feat/… 기능 별 개발 브랜치*deploy/stg에 PR(제목 \u0026ldquo;Feat: 작업 내용\u0026rdquo;) 후 (Squash) Merge hotfix/… 긴급 수정을 위해 배포 중인 메인 브랜치에서 분기한 브랜치*deploy/prd에 PR(제목 \u0026ldquo;Hotfix: 작업 내용\u0026rdquo;) 후 (Squash) Merge *원칙적으로 직접 push 금지 (긴급한 [hotfix]는 가능)*git pull origin deploy/stg --rebase 사용 권장*PR 시 추가 설명(스크린샷, GIF 포함 가능) 작성 권장\n❗️로컬에서 merge --squash(커밋 메시지 맨 윗줄 \u0026ldquo;Feat: 변경 내용\u0026quot;)한 경우 deploy/stg에 PR 후 Rebase Merge\n5. 폴더 구조 (/src) # Folder Desc pages - 컴포넌트들을 페이지(url) 별로 모아두는 곳- 해당 페이지의 최상위 컴포넌트는 index.tsx 사용 (다른 컴포넌트는 사용 금지)- 해당 페이지에서만 사용하는 컴포넌트는 하위 컴포넌트가 있는 경우 폴더로 아니면 파일로 저장 components - 공용 컴포넌트들을 모아두는 곳- 하위 컴포넌트(PascalCase)가 있거나 비슷한 도메인(camelCase)으로 묶을 수 있는 경우 폴더로 아니면 파일로 저장- common에는 여러 곳에서 쓰이는 요소들 저장 apis - API들을 도메인 별로 모아두는 곳 assets - 이미지 등의 자료들을 도메인 별로 모아두는 곳*svg는 컴포넌트로 빼서 사용, 네이밍은 \u0026ldquo;-Svg\u0026rdquo; 사용 hooks - 커스텀 훅들을 도메인 별로 모아두는 곳 i18n - i18n 다국어 지원 관련 자료들을 모아두는 곳 keys - 관리가 필요한 key들을 도메인별로 모아두는 곳*네이밍은 \u0026ldquo;-_KEY\u0026rdquo; 사용 natives - 네이티브 브릿지 함수들을 모아두는 곳- index.ts에서 플랫폼 확인 queries - React Query로 관리하는 전역 변수들을 도메인 별로 모아두는 곳- queryClient.ts에서 관련 설정 관리- queryErrorHandler.ts에서 에러 관리 recoils - Recoil로 관리하는 전역 변수들을 도메인 별로 모아두는 곳*네이밍은 \u0026ldquo;-State\u0026rdquo; 사용 utils - 기타 파일들을 constants, functions로 우선 분류한 뒤 도메인 별로 모아두는 곳 types - 공용 타입들을 도메인 별로 모아두는 곳- 전역 타입은 global.d.ts에 작성- 로컬 타입은 해당 파일 내부나 같은 인덱스에 작성*파일 네이밍은 -.type.ts 사용 styles - 공용 스타일들을 도메인 별로 모아두는 곳- 로컬 스타일은 같은 인덱스에 작성 *공용 스타일은 도메인 별로 _[공용 스타일].scss에 작성한 뒤 main.scss에서 합쳐서 내보냄 *도메인이 명확하지 않거나 파일이 많지 않은 경우 우선 따로 도메인을 나누지 않고 추후 회의를 통해 도메인을 나눌 수 있음\n6. 기타 # a) 기명함수 컴포넌트 사용 # b) import (auto) # import { builtin } from \u0026#34;builtin\u0026#34;; import { external } from \u0026#34;external\u0026#34;; import { internal } from \u0026#34;internal\u0026#34;; import { parent } from \u0026#34;../parent\u0026#34;; import { sibling } from \u0026#34;./sibling/sibling\u0026#34;; import { index } from \u0026#34;./index\u0026#34;; import type { IType } from \u0026#34;...\u0026#34;; import styles from \u0026#34;./styles.module.scss\u0026#34;; *루트 경로의 내장 모듈은 절대 경로만 사용 *타입은 import type만 사용\nc) export # 기본적으로 named export 사용 단일 컴포넌트는 export default 사용 d) 약어는 정해진 약어 외에는 사용하지 않기 # func, btn, msg, el, idx, err, res, req, img, prev, sup, sub e) 1rem = 10px 기준으로 사용 # PS. # 1함수 1기능 지향 높은 응집도와 낮은 결합도 지향 스타일은 SCSS 파일에서만 작업 (공통 요소 수정은 Wrapper 활용) 최대 넓이(max-width) 1920px, 최소 넓이(min-width) 320px ","date":"6 November 2022","permalink":"/posts/work/2/","section":"Posts","summary":"배경 # 입사 직후 팀원들에게 코드 컨벤션을 물어보자 딱히 정해진 것이 없다는 답변을 들었다.","title":"FE 컨벤션"},{"content":"배경 # 제품 상세페이지의 제품 이미지 바로 아래에 해당 제품의 평균 별점이 보이면 좋겠다는 의견이 나와서 이를 반영하기로 했다. 리뷰에 이미 평균 별점을 보여주는 기능이 적용되어 있었지만 별이 정수 단위로만 채워지고 있어서(예시. 4.3점이면 네 개, 4.5점이면 다섯 개) 소수점까지 정확히 반영되는 별점을 만들고 싶었다.\n시행착오 # 처음에는 별 5개가 나란히 있는 이미지를 받은 다음 아래에는 비어있는 별을, 위에는 채워져 있는 별을 겹쳐서 배치한 다음 채워져 있는 별의 부모 요소 넓이를 백분율에 따라 줄이고 overflow: hidden; 스타일을 적용하는 것으로 쉽게 구현했었다. 하지만 별 사이의 간격까지 백분율에 반영해 버리는 문제점을 지니고 있었다.\n구현 # 문제점을 해결하기 위해서 별 하나하나를 정수로 구분하고 별 내부를 소수점으로 구분하는 방법을 사용했다. 그리고 소수점 단위의 스타일 적용을 sass에서 구현하기 위해서 https://www.sassmeister.com/ 사이트를 참조해가며 반복문을 작성했다. (styled-component의 props가 잠시 그리워지는 시점이었다.) 마지막으로 별의 일부만 채우는 기능을 구현하기 위해 \u0026lt;svg/\u0026gt;에 margin-left: ...;를 마이너스 단위로 줘서 이동시킨 다음 내부의 \u0026lt;path/\u0026gt;를 transform: translateX(...);로 다시 이동시키는 방법을 사용했다.\n별점 리뷰 컴포넌트\rimport { StarSvg } from \u0026#34;src/assets/index\u0026#34;; import styles from \u0026#34;./StarReview.module.scss\u0026#34;; interface IStarsProps { score: number | undefined; size: string; emptyColor: string; filledColor: string; } /** * 5점 만점의 별점 리뷰 컴포넌트 `★★★★☆` * @score 별점(1~5점) e.g. `4.3` * @size 크기 e.g. `4vw` * @emptyColor 비었을 때 색상 e.g. `\u0026#34;#EEEDEF\u0026#34;` * @filledColor 찼을 때 색상 e.g. `\u0026#34;#6435C7\u0026#34;` */ export default function StarReview({ score, size, emptyColor, filledColor, }: IStarsProps) { const arr = new Array(5).fill(0); const _score = score || 0; const integer = Math.floor(_score); const decimal = Number((Number(_score.toFixed(1)) - integer).toFixed(1)) * 10; return ( \u0026lt;div className={styles.container}\u0026gt; \u0026lt;div className={styles.stars}\u0026gt; {arr.map((_, i) =\u0026gt; ( \u0026lt;StarSvg width={size} height={size} fill={emptyColor} key={i} /\u0026gt; ))} \u0026lt;/div\u0026gt; {!_score || _score \u0026lt; 1 || _score \u0026gt; 5 ? null : ( \u0026lt;div className={styles.stars} data-type=\u0026#34;filled\u0026#34;\u0026gt; {arr.map((_, i) =\u0026gt; ( \u0026lt;div key={i} data-decimal={decimal} data-index={i === integer ? \u0026#34;true\u0026#34; : \u0026#34;false\u0026#34;} data-empty={i \u0026gt; integer ? \u0026#34;true\u0026#34; : \u0026#34;false\u0026#34;} \u0026gt; \u0026lt;StarSvg width={size} height={size} fill={filledColor} /\u0026gt; \u0026lt;/div\u0026gt; ))} \u0026lt;/div\u0026gt; )} \u0026lt;/div\u0026gt; ); } 별점 리뷰 스타일\r.container { position: relative; .stars { display: flex; gap: 4px; \u0026amp;[data-type=\u0026#34;filled\u0026#34;] { top: 0; position: absolute; @for $i from 0 through 9 { \u0026gt; div[data-decimal=\u0026#34;#{$i}\u0026#34;][data-index=\u0026#34;true\u0026#34;] \u0026gt; svg { margin-left: -(100% - percentage($i * 0.1)); \u0026gt; path { transform: translateX(100% - percentage($i * 0.1)); } } } \u0026gt; div[data-empty=\u0026#34;true\u0026#34;] \u0026gt; svg { display: none; } } } } 별 이미지 (svg)\r\u0026lt;svg width=\u0026#34;current\u0026#34; height=\u0026#34;current\u0026#34; viewBox=\u0026#34;0 0 16 16\u0026#34; fill=\u0026#34;none\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; \u0026gt; \u0026lt;path d=\u0026#34;M7.71663 0.815216C7.81002 0.546548 8.18998 0.546548 8.28337 0.815216L9.81237 5.21396C9.85357 5.33248 9.96418 5.41284 10.0896 5.4154L14.7456 5.51028C15.0299 5.51608 15.1474 5.87744 14.9207 6.04928L11.2097 8.86273C11.1097 8.93854 11.0675 9.06857 11.1038 9.18867L12.4524 13.6461C12.5347 13.9183 12.2273 14.1416 11.9939 13.9792L8.17135 11.3192C8.06836 11.2476 7.93164 11.2476 7.82865 11.3192L4.00614 13.9792C3.77267 14.1416 3.46527 13.9183 3.54764 13.6461L4.89617 9.18867C4.9325 9.06857 4.89025 8.93854 4.79027 8.86273L1.0793 6.04928C0.852639 5.87744 0.970053 5.51608 1.25443 5.51028L5.91037 5.4154C6.03582 5.41284 6.14643 5.33248 6.18763 5.21396L7.71663 0.815216Z\u0026#34; fill=\u0026#34;current\u0026#34; /\u0026gt; \u0026lt;/svg\u0026gt; export { ReactComponent as StarSvg } from \u0026#34;./star.svg\u0026#34;; *CRA 시에만 ReactComponent 사용 가능\n주의사항 # 해당 코드를 다른 프로젝트에 적용할 때 제대로 적용되지 않는 문제가 발생했다. 문제를 해결하기 위해 개발자 모드에서 스타일을 하나하나 꺼보면서 원인을 파악했다. 원인은 문제가 발생하는 프로젝트에 전역으로 text-align: center; 스타일이 먹혀있는 것이었다. 이 경험 덕에 전역으로 스타일을 먹이는 것은 위험하다는 것과 svg도 text-align이 먹힌다는 것을 배웠다.\n참조 # 출근 첫날 회사의 코드를 살펴보는 과정에서 이 코드를 보고는 \u0026ldquo;이런 식으로 sass에서 반복문을 활용하는구나\u0026quot;를 알게 되었고 메모장에 메모해 뒀었다. (취업 전에는 styled-component와 tailwind-CSS를 주로 사용해서 sass에 대한 이해도가 상대적으로 부족했다.) 그리고 별점의 소수점을 어떻게 sass에서 반영할 수 있을까를 고민하는 과정에서 이 코드가 떠올랐고 이를 참조해서 문제를 쉽게 해결할 수 있었다.\n$spacesPx: (2, 4, 6, 8, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100); @each $space in $spacesPx { .mt#{$space} { margin-top: #{$space}px; } .mr#{$space} { margin-right: #{$space}px; } .mb#{$space} { margin-bottom: #{$space}px; } .ml#{$space} { margin-left: #{$space}px; } } ","date":"5 November 2022","permalink":"/posts/work/1/","section":"Posts","summary":"배경 # 제품 상세페이지의 제품 이미지 바로 아래에 해당 제품의 평균 별점이 보이면 좋겠다는 의견이 나와서 이를 반영하기로 했다.","title":"평균 별점 (소수점 반영)"},{"content":"","date":"31 October 2022","permalink":"/categories/etc/","section":"Categories","summary":"","title":"\u003cetc\u003e"},{"content":"","date":"31 October 2022","permalink":"/tags/error/","section":"Tags","summary":"","title":"error"},{"content":"","date":"31 October 2022","permalink":"/tags/git/","section":"Tags","summary":"","title":"git"},{"content":"배경 # 취업을 하게 되면서 컴퓨터 두 대(개인 컴퓨터와 회사 컴퓨터)를 이용해 블로깅을 하게 되었고, 이 과정에서 서브 모듈 관련 문제를 만났다.\n문제 # blog 저장소에는 블로그 설정, 테마 등의 모든 요소가 저장되고 yuchanjeong.github.io 저장소에는 빌드 된 정적 파일들만 저장되고 있다. blog 저장소에서 블로그에 관한 모든 것들을 관리하고 yuchanjeong.github.io 저장소는 서브 모듈로 관리하고 있는데 git clone을 한 뒤 push를 했을 때 blog 저장소에는 정상적으로 반영이 되나 yuchanjeong.github.io 저장소에는 전혀 반영이 되지 않는 문제가 발생했다.\n해결 # 문제의 원인은 일반 클론 시 서브 모듈까지 클론하지 않기 때문이었다. 그래서 git clone --recurse-submodules를 통해 서브 모듈까지 클론해 줬다. 하지만 여전히 문제가 해결되지 않았고, cd public을 통해 서브 모듈로 이동한 뒤 확인해 보자 서브 모듈의 현재 브랜치가 main이 아니었다. 그래서 서브 모듈의 브랜치를 main으로 변경해 주자 문제가 해결되었다.\n*만약 기존 폴더를 그대로 사용한다면 git pull origin main --rebase를 통해 변경사항을 당겨 받은 뒤 서브 모듈로 이동해 git pull origin main -f를 통해 서브 모듈의 변경사항도 당겨 받으면 된다.\nEtc # 서브 모듈 등록 git submodule add -b main https://github.com/YuchanJeong/yuchanjeong.github.io.git public 원격 저장소의 서브 모듈로 업데이트 하기 git submodule update --remote 스크립트의 개행 제거 vi -b up.sh :%s/control+v -\u0026gt; control+m//g ","date":"31 October 2022","permalink":"/posts/etc/1/","section":"Posts","summary":"배경 # 취업을 하게 되면서 컴퓨터 두 대(개인 컴퓨터와 회사 컴퓨터)를 이용해 블로깅을 하게 되었고, 이 과정에서 서브 모듈 관련 문제를 만났다.","title":"깃허브 블로그 서브 모듈 문제"},{"content":"1) 기본 설정 # Command Details git init 깃 추적 시작 git config --global --list 기본 설정 보기 git config --global core.autocrlf true 개행문자 설정 git config --global user.name YuchanJeong 사용자 이름 설정 git config --global user.email yuchanjeong0923@gmail.com 사용자 메일 설정 git config --global core.editor vim 기본 에디터 설정 git config --global init.defaultBranch main 기본 브랜치 설정 git config --global commit.template ~/.gitmessage.txt 커밋 템플릿 설정 .vimrc\rset nocompatible \u0026#34; 오리지날 VI와 호환하지 않음 set autoindent \u0026#34; 자동 들여쓰기 set cindent \u0026#34; C 프로그래밍용 자동 들여쓰기 set smartindent \u0026#34; 스마트한 들여쓰기 set wrap set nowrapscan \u0026#34; 검색할 때 문서의 끝에서 처음으로 안돌아감 set nobackup \u0026#34; 백업 파일을 안만듬 set noswapfile \u0026#34;set visualbell \u0026#34; 키를 잘못눌렀을 때 화면 프레시 set ruler \u0026#34; 화면 우측 하단에 현재 커서의 위치(줄,칸) 표시 set shiftwidth=4 \u0026#34; 자동 들여쓰기 4칸 set number \u0026#34; 행번호 표시, set nu 도 가능 set fencs=ucs-bom,utf-8,euc-kr.latin1 \u0026#34; 한글 파일은 euc-kr로, 유니코드는 유니코드로 set fileencoding=utf-8 \u0026#34; 파일저장인코딩 set tenc=utf-8 \u0026#34; 터미널 인코딩 \u0026#34;set expandtab \u0026#34; 탭대신 스페이스 set hlsearch \u0026#34; 검색어 강조, set hls 도 가능 set ignorecase \u0026#34; 검색시 대소문자 무시, set ic 도 가능 set tabstop=4 \u0026#34; 탭을 4칸으로 set lbr set incsearch \u0026#34; 키워드 입력시 점진적 검색 set cursorline \u0026#34; 편집 위치에 커서 라인 설정 set laststatus=2 \u0026#34; 상태바 표시를 항상한다 syntax on \u0026#34; 구문강조 사용 filetype indent on \u0026#34; 파일 종류에 따른 구문강조 set background=dark \u0026#34; 하이라이팅 lihgt / dark set backspace=eol,start,indent \u0026#34; 줄의 끝, 시작, 들여쓰기에서 백스페이스시 이전줄로 set history=1000 \u0026#34; vi 편집기록 기억갯수 .viminfo에 기록 highlight Comment term=bold cterm=bold ctermfg=4 \u0026#34; 코멘트 하이라이트 set mouse=a \u0026#34; vim에서 마우스 사용 set t_Co=256 \u0026#34; 색 조정 .gitmessage.txt\r[type] content # ---------- # [add] 기능 추가 / e.g. [add] 로그인 기능 추가: 자체 로그인, Kakao 소셜 로그인 # [delete] 기능 삭제 / e.g. [delete] Kakao 소셜 로그인 기능 삭제 # [update] 기능 개선 / e.g. [update] 자체 로그인에 성별 입력 추가 # [change] 기능 변경 / e.g. [change] 로그인 유효성 검사 조건 변경 # [modify] 기능 변경 없는 코드 변경 / e.g. [modify] 단순 주석 및 변수명 변경 # [fix] 문제 해결 / e.g. [fix] 비밀번호 대소문자 미구분 문제 해결 # [setting] 설치 및 설정 / e.g. [setting] 리덕스 설치 및 초기 설정 # [style] 스타일 관련 작업 / e.g. [style] 자체 로그인 페이지 스타일 적용 # [docs] 문서 관련 작업 / e.g. [docs] README.md 수정 # [test] 테스트 코드 / e.g. [test] 결제 기능 테스트 코드 추가 # [temp] 테스트 관련 임시 작업 / e.g. [temp] 결제 기능 확인용 임시 코드 추가 # [chore] 기타 작업 / e.g. [chore] 빌드파일 수정 # ---------- # 개조식으로 작성 # \u0026#34;어떻게\u0026#34;가 아닌 \u0026#34;무엇\u0026#34;을 설명, 필요할 경우 \u0026#34;왜\u0026#34;도 설명 # 내용이 필요할 경우 제목에서 한 줄 띄우고 작성 # 내용이 여러 줄일 때는 \u0026#34;-\u0026#34;로 구분 # ---------- # \u0026#34;... 추가\u0026#34;는 [add], \u0026#34;...에 ... 추가\u0026#34;는 [update] # 살펴볼 필요가 없는 [modify]에는 \u0026#34;단순\u0026#34; 키워드 사용 # [hotfix], [i18n], [refactor] 등 분류가 명확한 커스텀 태그 사용 가능 2) 원격 저장소 # Command Details git remote -v 원격 저장소 연결 확인 git remote add [name] [url] 원격 저장소 연결 git remote remove [name] 원격 저장소 연결 해제 git push [name] [branch] (-f) 원격 저장소에 Push (강제) git pull [name] [branch] (--rebase) 원격 저장소 Pull (이어 붙히기) git clone [url] ([directory]) 원격 저장소 복사 (폴더명) 3) 파일 상태 # Command Details git status 파일 상태 확인 git diff 파일 상태 비교*작업역역과 스테이지 차이 git diff --cached 파일 상태 비교*스테이지와 저장소 차이 git diff [commit] [commit] 커밋 간 상태 비교 git diff [branch] [branch] 브랜치 간 상태 비교 4) 스테이징 (추가) # Command Details git add -p 변경 내용을 확인 후 청크 별로 추가*y(추가), n(제외), q(종료) git add [directory] 해당 폴더 및 하위 폴더의 변경 내용을 추가 git add . 현재 폴더 및 하위 폴더의 변경 내용을 추가 5) 커밋 (확정) # Command Details git commit 커밋 생성 git commit -m \u0026ldquo;[msg]\u0026rdquo; 커밋 메시지와 함께 커밋 생성 git commit -am \u0026ldquo;[msg]\u0026rdquo; 스테이징 후 커밋 메시지와 함께 커밋 생성 *한 번 이상 커밋 한 파일만 가능 git commit --amend 마지막 커밋 메시지 수정 6) 커밋 기록 # Command Details git log 커밋 기록 보기 git log -p 커밋 기록과 패치내용 보기 git log --stat 커밋 기록과 패치통계 보기 git log --graph 커밋 기록과 그래프 보기 git log [branch]..[branch] 후자에만 있는 커밋 기록 보기 7) 되돌리기 # Command Details git reset --hard [commit] | HEAD[~n] 해당 커밋으로 되돌린 후이후의 커밋, 스테이징, 작업 초기화 git reset [commit] | HEAD[~n] 해당 커밋으로 되돌린 후이후의 커밋, 스테이징 초기화 git reset --soft [commit] | HEAD[~n] 해당 커밋으로 되돌린 후이후의 커밋 초기화 git revert [commit] 해당 커밋의 수정사항 취소 후 새 커밋 생성 git revert [commit]..[commit] 해당 범위의 수정사항 취소 후 새 커밋 생성 git rebase -i [commit] | HEAD[~n] p: 커밋 그냥 사용, 재정렬 및 삭제 가능r: 커밋 메시지 수정e: 커밋 메시지 및 내용 수정*HEAD가 해당 커밋으로 이동, 추가 작업 가능*git rebase --continue (작업 종료)*git rebase --abort (작업 중단)s: squash merged: 커밋 삭제 8) 임시 저장 # Command Details git stash (-u) 임시 저장 후 직전 커밋 상태로 되돌아감 (새 파일도)*한 번 이상 스테이징 한 파일만 가능 git stash list 임시 저장 목록 보기 git stash apply (stash@{[n]}) 최근(해당) 임시 저장 상태로 돌아가기 git stash drop (stash@{[n]}) 최근(해당) 임시 저장 상태 지우기 git stash pop 최근 임시 저장 상태 apply 후 drop 9) 브랜치 # Command Details git branch (-a) 브랜치 목록 보기 (원격 목록도) git branch [branch] 브랜치 생성 git branch -d [branch] 해당 브랜치 삭제 git branch -m [branch] [branch] 브랜치명 바꾸기 git checkout [branch] 브랜치 전환 git checkout -b [branch] 브랜치 생성 후 전환 git merge [branch] (--squash) 현재 브랜치에 해당 브랜치 병합 (스쿼시 병합) git rebase [branch] 현재 브랜치에 해당 브랜치 이어 붙이기 10) 삭제 # Command Details git rm (--cached) [file] 해당 파일 삭제 (원격에서만) git rm -r (--cached) [directory] 해당 폴더 삭제 (원격에서만) git fetch --all --prune 원격 브랜치 흔적 삭제 Etc # 1) .gitignore # List Details example.xxx 해당 파일명 전부 제외 /example.xxx 현재 폴더의 해당 파일 제외 example/ 해당 폴더와 하위 경로 제외 example/example.xxx 해당 폴더의 해당 파일 제외 *.xxx 특정 확장자 파일 전부 제외 !example.xxx 예외 파일명 (버전 관리 ON) 2) SSH 등록 # ssh-keygen으로 ~/.ssh/에 id_rsa.pub(공개키)와 id_rsa(개인키) 생성 공개키를 Github의 Settings/SSH and GPG keys에 등록 3) Github 계정 오류 # 키체인 접근 -\u0026gt; github.com ","date":"30 October 2022","permalink":"/posts/summary/git/","section":"Posts","summary":"1) 기본 설정 # Command Details git init 깃 추적 시작 git config --global --list 기본 설정 보기 git config --global core.","title":"Git"},{"content":"","date":"29 October 2022","permalink":"/categories/book/","section":"Categories","summary":"","title":"\u003cbook\u003e"},{"content":" 개발자의 글쓰기는 \u0026lsquo;정확\u0026rsquo;하고 \u0026lsquo;간결\u0026rsquo;하고 \u0026lsquo;가독성\u0026rsquo;이 높아야 한다.\n1) 기초 # 두괄식 - 핵심 설명 후 부가 설명 구조화 - 들여쓰기 활용 Ps1. 함수명에 사용하는 영단어 뉘앙스 차이\nstop(중지) / restart(재개) end(종료) / start(시작) finish(완전 종료) / pause(일시 중지) / hold(의도를 지닌 중지) get(획득) / retrieve(검색 후 획득) / acquire(독점 획득) / fetch(다음 대상 획득) set(할당) / init(초기값 할당) create(틀을 만듦) / register(만들어진 틀에 입력) change(내용 변화) / modify(틀린 내용 수정) / revise(새로운 내용으로 개정) do(행동) / must(필수) / should(권고) is(boolean 데이터) Ps2. \u0026ldquo;-조사\u0026rdquo;, \u0026ldquo;-하다\u0026rdquo;, \u0026ldquo;숫자-\u0026rdquo;, \u0026ldquo;-기호-\u0026ldquo;만 붙여 쓰고 나머지는 띄어 씀\n2) 네이밍과 주석 # 기본적인 네이밍 컨벤션 클래스와 컴포넌트 - PascalCase\n함수와 변수 - camelCase\n상수 - UPPER_DELIMITER_CASE\n패키지와 모듈 - lowercase 명사+명사+명사 (변수) 형용사+명사+명사 (변수) 동사+명사+명사 (함수) BEM 클래스 표기법 - 대상__요소\u0026ndash;상태 변수명 명확한 의미(E.g. d, day(X) -\u0026gt; today, someday(O)) 복수형은 짧을 때는 \u0026ldquo;-s\u0026rdquo;, 길 때는 \u0026ldquo;listOf-\u0026ldquo;나 \u0026ldquo;arrayOf-\u0026ldquo;로 표현 함수명 필요한 기능을 문장으로 작성 함수는 시스템이 할 일이기 때문에 사용자가 할 일은 삭제 중복 내용을 삭제하며 문장 정리 후 분리 1함수 1기능 원칙으로 문장 재분리 기능별 함수 작성 이름이 기능을 명확하게 설명해야 함 설명이 안될 경우 함수를 더 분리해야 함 좋은 이름의 기준 SMART Easy to Search 고전적 범주화 E.g. userBuyer, userPayer, userRegister Easy to Mix 상위 태그와 조합 E.g. h1.title, h2.title, p.title Easy to Agree 구별할 필요가 없는 것까지 이름을 새로 지을 필요 없음 Easy to Remember 이미 널리 알려진 용어는 그냥 쓰는 것이 효율적 Easy to Type 입력하기 쉽고 오타를 낼 가능성이 적은 이름 주석 코드는 의미를, 주석은 의도를 주석은 디버깅으로 바로 잡을 수 없으니 개발자가 신경 써야 함 3) 에러 메시지와 선택지 # 에러의 내용, 원인, 해결법을 알려 줘야 함 \u0026ldquo;예 / 아니오\u0026rdquo; 보다는 구체적인 선택지를 제시 E.g. \u0026ldquo;페이지에 머물기 / 페이지에서 나가기\u0026rdquo; 순서에 일관성이 있어야 함 비활성화를 활용해 에러 예방 가능 4) 릴리스 문서와 장애 보고서 # a. 릴리즈 문서\n선정: 회사와 개발자가 말하고 싶은 것과 독자가 듣고 싶은 것 중 두 개 이상 만족하는 것 선정 분류: 독자에 따라 \u0026ldquo;개발 관점에서 비슷한 내용\u0026rdquo; 혹은 \u0026ldquo;사용 관점에서 비슷한 내용\u0026quot;으로 분류 요약: 불필요한 부사, 형용사, 조사, 어미 제거 종합: 종합은 분석의 개념화와 반대로 특징이나 결과로 서술 Ps. Semantic Versioning - major(호환 X).minor(새로운 기능).patch\nb. 장애 보고서\n문제, 문제점, 해결책, 후순 계획 순서로 작성 면책 조항 필수 필수, 권장, 선택, 예외 사항 표기 장애 보고서 구성 장애 내용 장애 영향 장애 원인 조치 사항 조치 결과 핵심 원인 향후 대책 장애의 근본 원인을 찾기 위해 원인의 원인을 계속 찾아라(5 whys) 재발을 막기 위해서는 원인 대신 이유를 묻고 사람 주어로 대답하라 개발 관점은 기능이 작동하지 않은 것, 비즈니스 관점은 손실이 발생한 것 모호하게 말고 정확한 정보를 적어라(E.g. 재발 가능성 30%) 5) 개발 가이드 # 서비스 개념을 범주, 용도, 특징으로 설명하라 용도는 범주의 핵심 기능을 써라 특징은 장점(자신 기준)과 강점(경쟁사와 비교)에서 뽑아 써라 이해를 돕기 위해 그림과 글로 묘사해라 주관적 묘사와 객관적 묘사를 둘 다 써라 의견을 쓰려면 근거를 대라 주장과 이유, 문제와 답의 거리를 좁혀라 순서에서 단계를 단계에서 목차를 만들어라 6) SI 제안서 # 고객의 문제인식이 중대하고 제안사의 문제 해결 능력이 탁월할 때, 경쟁사와 비교하여 강점들을 제안하라 고객의 문제인식이 중대하고 제안사의 문제 해결 능력이 부족할 때, 일단 동감하고 경쟁사와 다른 방안을 제시하라 고객의 문제인식이 사소하고 제안사의 문제 해결 능력이 탁월할 때, 고객이 문제를 중대하게 인식하게 만들어라 고객의 문제인식이 사소하고 제안사의 문제 해결 능력이 부족할 때, 경쟁사의 전략을 확인해서 대처하라 요구사항을 분석하지말고 제시하라 변화하는 요구사항에 대비하라 - Two Track(전체 검수와 기능별 검수) 개발 시간 대비 고객의 예상 만족도가 높은 것 위주로 개발하라 7) 기술 블로그 # 주제 의식을 버리고 소재 의식으로 쓰자 독자 수준이 아니라 자기 수준으로 쓰자 저 직접 경험하고 실험한 과정이나 결과*목차를 잘 잡고 본문부터 써라 술 어떤 것을 분석하여 의미를 풀이하고 해석한 것*원전을 비교하고 실험해 풀이해서 써라 편 산만하고 복잡한 자료를 편집해 질서를 부여한 것*순서를 요약해서 써라 집 여러 사람의 견해나 흩어진 자료를 한데 모아 정리한 것*자료를 모아 핵심을 엮어 써라 ","date":"29 October 2022","permalink":"/posts/book/%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-%EA%B8%80%EC%93%B0%EA%B8%B0/","section":"Posts","summary":"개발자의 글쓰기는 \u0026lsquo;정확\u0026rsquo;하고 \u0026lsquo;간결\u0026rsquo;하고 \u0026lsquo;가독성\u0026rsquo;이 높아야 한다.","title":"개발자의 글쓰기 - 김철수"}]