[{"content":"","date":"7 November 2022","permalink":"/categories/summary/","section":"Categories","summary":"","title":"\u003csummary\u003e"},{"content":"","date":"7 November 2022","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"\ruseCheckbox.ts\rimport { useState } from \u0026#34;react\u0026#34;; import type { ChangeEvent, Dispatch, SetStateAction } from \u0026#34;react\u0026#34;; /** * @param allList 체크 박스에 포함할 요소 값들 * @param limit ? 체크 가능 개수; `null` * @param initialCheckedList ? 초기에 체크되어 있는 요소 값들; `[]` * @returns `{ attribute, checkedList, setCheckedList }` */ export const useCheckbox = ( allList: string[], limit: number | null = null, initialCheckedList?: string[] ): IUseCheckboxResult =\u0026gt; { const [checkedList, setCheckedList] = useState(initialCheckedList || []); const onChange = ( event: ChangeEvent\u0026lt;HTMLInputElement | HTMLTextAreaElement\u0026gt; ): void =\u0026gt; { const value = event.target.value; if (value === \u0026#34;allCheck\u0026#34;) { if (limit !== null) return; if (checkedList.length === allList.length) { setCheckedList([]); } else { setCheckedList([...allList]); } return; } if (checkedList.includes(value)) { setCheckedList((prevCheckedList) =\u0026gt; prevCheckedList.filter((checkedValue) =\u0026gt; checkedValue !== value) ); } else { if (limit !== null \u0026amp;\u0026amp; checkedList.length \u0026gt;= limit) { setCheckedList((prevCheckedList) =\u0026gt; [ ...prevCheckedList.filter((_, idx) =\u0026gt; idx !== 0), ]); } setCheckedList((prevCheckedList) =\u0026gt; [...prevCheckedList, value]); } }; return { attribute: { type: \u0026#34;checkbox\u0026#34;, onChange }, checkedList, setCheckedList, }; }; // ========== usage ========== // /* const EXAMPLES = [\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;c\u0026#34;] const EXAMPLE_LABELS: { [key: string]: string } = { \u0026#34;a\u0026#34;: \u0026#34;가\u0026#34;, \u0026#34;b\u0026#34;: \u0026#34;나\u0026#34;, \u0026#34;c\u0026#34;: \u0026#34;다\u0026#34;, } const exampleCheckbox = useCheckbox(EXAMPLES) return ( \u0026lt;div\u0026gt; \u0026lt;label data-is-checked={ EXAMPLES.length === exampleCheckbox.checkedList.length } \u0026gt; 전체 선택 \u0026lt;input {...exampleCheckbox.attribute} value=\u0026#34;allCheck\u0026#34; // checked={EXAMPLES.length === exampleCheckbox.checkedList.length} /\u0026gt; \u0026lt;/label\u0026gt; {EXAMPLES.map((example) =\u0026gt; ( \u0026lt;label key={example} data-is-checked={exampleCheckbox.checkedList.includes(example)} \u0026gt; {EXAMPLE_LABELS[example]} \u0026lt;input {...exampleCheckbox.attribute} value={example} // checked={exampleCheckbox.checkedList.includes(example)} /\u0026gt; \u0026lt;/label\u0026gt; ))} \u0026lt;div\u0026gt;{exampleCheckbox.checkedList}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ) */ /* input[type=\u0026#34;checkbox\u0026#34;] { display: none; } label { ... \u0026amp;[data-is-checked=\u0026#34;true\u0026#34;] { ... } } */ // ========== types ========== // export interface IUseCheckboxResult { attribute: { type: \u0026#34;checkbox\u0026#34;; onChange: (event: ChangeEvent\u0026lt;HTMLInputElement\u0026gt;) =\u0026gt; void; }; checkedList: string[]; setCheckedList: Dispatch\u0026lt;SetStateAction\u0026lt;string[]\u0026gt;\u0026gt;; } useSelect.ts\rimport { useState } from \u0026#34;react\u0026#34;; import type { ChangeEvent, Dispatch, SetStateAction } from \u0026#34;react\u0026#34;; /** * @param initialValue ? 초기값; `\u0026#34;\u0026#34;` * @returns `{ attribute, value, setValue }` */ export const useSelect = (initialValue = \u0026#34;\u0026#34;): IUseSelectResult =\u0026gt; { const [value, setValue] = useState(initialValue); const onChange = (event: ChangeEvent\u0026lt;HTMLSelectElement\u0026gt;) =\u0026gt; { if (event.target.value !== value) setValue(event.target.value); }; return { attribute: { value, onChange }, value, setValue, }; }; // ========== usage ========== // /* const EXAMPLES = [ { value: \u0026#34;a\u0026#34;, label: \u0026#34;가\u0026#34; }, { value: \u0026#34;b\u0026#34;, label: \u0026#34;나\u0026#34; }, { value: \u0026#34;c\u0026#34;, label: \u0026#34;다\u0026#34; }, ] const exampleSelect = useSelect(EXAMPLES[0].value) return ( \u0026lt;select {...exampleSelect.attribute}\u0026gt; {EXAMPLES.map((example) =\u0026gt; ( \u0026lt;option key={example.value} value={example.value}\u0026gt; {example.label} \u0026lt;/option\u0026gt; ))} \u0026lt;/ select\u0026gt; ) */ // ========== types ========== // export interface IUseSelectResult { attribute: { value: string; onChange: (event: ChangeEvent\u0026lt;HTMLSelectElement\u0026gt;) =\u0026gt; void; }; value: string; setValue: Dispatch\u0026lt;SetStateAction\u0026lt;string\u0026gt;\u0026gt;; } useInput.ts\rimport { useState } from \u0026#34;react\u0026#34;; import type { ChangeEvent, Dispatch, SetStateAction } from \u0026#34;react\u0026#34;; /** * @param initialValue ? 초기값; `\u0026#34;\u0026#34;` * @param placeholder ? 표시자; `\u0026#34;\u0026#34;` * @returns `{ attribute, value, setValue }` */ export const useInput = ( initialValue = \u0026#34;\u0026#34;, placeholder = \u0026#34;\u0026#34; ): IUseInputResult =\u0026gt; { const [value, setValue] = useState(initialValue); const onChange = ( event: ChangeEvent\u0026lt;HTMLInputElement | HTMLTextAreaElement\u0026gt; ): void =\u0026gt; { setValue(event.target.value); }; return { attribute: { value, placeholder, onChange }, value, setValue, }; }; // ========== usage ========== // /* const exampleInput = useInput(\u0026#34;\u0026#34;, \u0026#34;\u0026#34;) return ( \u0026lt;input {...exampleInput.attribute} /\u0026gt;` ) */ // ========== types ========== // export interface IUseInputResult { attribute: { value: string; placeholder: string; onChange: ( event: ChangeEvent\u0026lt;HTMLInputElement | HTMLTextAreaElement\u0026gt; ) =\u0026gt; void; }; value: string; setValue: Dispatch\u0026lt;SetStateAction\u0026lt;string\u0026gt;\u0026gt;; } useIntersectionObserver.ts\rimport { useEffect, useState } from \u0026#34;react\u0026#34;; import type { RefObject } from \u0026#34;react\u0026#34;; /** * @param targetRef 관측 대상 * @param targetMargin ? 관측 범위; `\u0026#34;0%\u0026#34;` * @param isFreezeOnceVisible ? 한번 이상 관측 안 함 여부; `false` * @returns 관측 여부 */ export const useIntersectionObserver = ( targetRef: RefObject\u0026lt;HTMLDivElement\u0026gt;, targetMargin = \u0026#34;0%\u0026#34;, isFreezeOnceVisible = false ): boolean =\u0026gt; { const [entry, setEntry] = useState\u0026lt;IntersectionObserverEntry\u0026gt;(); const isFrozen = entry?.isIntersecting \u0026amp;\u0026amp; isFreezeOnceVisible; const updateEntry = ([entry]: IntersectionObserverEntry[]): void =\u0026gt; { setEntry(entry); }; useEffect(() =\u0026gt; { const target = targetRef?.current; const hasIOSupport = !!window.IntersectionObserver; if (!hasIOSupport || isFrozen || !target) return; const observerParams = { threshold: 0, root: null, rootMargin: targetMargin, }; const observer = new IntersectionObserver(updateEntry, observerParams); observer.observe(target); return () =\u0026gt; observer.disconnect(); }, [targetRef?.current, targetMargin, isFrozen]); return !!entry?.isIntersecting; }; // ========== usage ========== // /* const exampleRef = useRef\u0026lt;HTMLDivElement\u0026gt;(null); const isVisible = useIntersectionObserver(exampleRef); return ( \u0026lt;div\u0026gt; \u0026lt;div\u0026gt;{isVisible ? \u0026#34;보임\u0026#34; : \u0026#34;안보임\u0026#34;}\u0026lt;/div\u0026gt; \u0026lt;div ref={exampleRef}\u0026gt;example\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ) */ useDetectOutsideClick.ts\rimport { useState, useEffect } from \u0026#34;react\u0026#34;; import type { Dispatch, SetStateAction, RefObject } from \u0026#34;react\u0026#34;; /** * @param targetRef 관측 대상 * @param initialValue ? 초기값; `false` * @returns `[isOpen, setIsOpen]` * */ export const useDetectOutsideClick = ( targetRef: RefObject\u0026lt;HTMLDivElement\u0026gt;, initialValue = false ): TUseDetectOutsideClickResult =\u0026gt; { const [isOpen, setIsOpen] = useState(initialValue); useEffect(() =\u0026gt; { const onClick = (event: MouseEvent) =\u0026gt; { if ( targetRef.current !== null \u0026amp;\u0026amp; !targetRef.current.contains(event.target as Node) ) { setIsOpen(false); } }; if (isOpen) { window.addEventListener(\u0026#34;click\u0026#34;, onClick); } return () =\u0026gt; { window.removeEventListener(\u0026#34;click\u0026#34;, onClick); }; }, [isOpen]); return [isOpen, setIsOpen]; }; // ========== usage ========== // /* const exampleRef = useRef\u0026lt;HTMLDivElement\u0026gt;(null); const [isOpen, setIsOpen] = useDetectOutsideClick(exampleRef); const openModal = () =\u0026gt; { setIsOpen(true); }; return ( \u0026lt;div ref={exampleRef}\u0026gt; \u0026lt;div onClick={openModal}\u0026gt;열기\u0026lt;/div\u0026gt; {isOpen ? \u0026lt;div\u0026gt;모달\u0026lt;/div\u0026gt; : null} \u0026lt;/div\u0026gt; ); */ // ========== types ========== // export type TUseDetectOutsideClickResult = [ boolean, Dispatch\u0026lt;SetStateAction\u0026lt;boolean\u0026gt;\u0026gt; ]; useImageElement.ts\rimport { useEffect, useState } from \u0026#34;react\u0026#34;; export const useImageElement = (url: string): TUseImageElementResult =\u0026gt; { const [imageElement, setImageElement] = useState\u0026lt;HTMLImageElement\u0026gt;(); const [isErr, setIsErr] = useState\u0026lt;boolean\u0026gt;(false); useEffect(() =\u0026gt; { const image = new window.Image(); image.src = url; image.onload = () =\u0026gt; { setImageElement(image); }; image.onerror = () =\u0026gt; { setIsErr(true); }; }, [url]); return [imageElement, isErr]; }; // ========== types ========== // export type TUseImageElementResult = [HTMLImageElement | undefined, boolean]; ","date":"7 November 2022","permalink":"/posts/summary/custom-hook/","section":"Posts","summary":"useCheckbox.","title":"Custom Hook"},{"content":"","date":"7 November 2022","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"7 November 2022","permalink":"/tags/react/","section":"Tags","summary":"","title":"react"},{"content":"","date":"7 November 2022","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"\rA blog from a developer who loves \u0026ldquo;Why?\u0026rdquo; :)\rPrevious posts are in this repository.\r😊 About me #\rName Yuchan Jeong Work WithBecon(FE Developer) Languages Korean(Native), English(Intermediate) 👇 Follow me on #\rMobile Number +82 10 8295 2674 E-mail yuchanjeong0923@gmail.com Blog https://yuchanjeong.github.io Github /yuchanjeong ","date":"7 November 2022","permalink":"/","section":"Yuchan's hello world!","summary":"A blog from a developer who loves \u0026ldquo;Why?","title":"Yuchan's hello world!"},{"content":"","date":"6 November 2022","permalink":"/categories/work/","section":"Categories","summary":"","title":"\u003cwork\u003e"},{"content":"","date":"6 November 2022","permalink":"/tags/i18n/","section":"Tags","summary":"","title":"i18n"},{"content":"배경 #\r새로 진행하고 있는 B2B 프로젝트에 글로벌 진출 기회가 생겨서 다국어 처리를 할 필요가 생겼다.\n검색 결과 리액트에서 다국어 처리를 할 때는 보통 react-i18next나 react-intl을 사용하고 있었다. react-i18next는 번역에만 충실하나 후에 SSR이 필요할 때 next-i18next로 쉽게 전환할 수 있는 장점이 있었고, react-intl은 날짜, 시간, 숫자 등의 포멧팅을 지원하는 장점이 있었다.\n둘 다 이미 많은 사용자를 지니고 있어서 안정성은 확보되었다고 판단했고, 특별한 차이점도 없었기 때문에 npm trends와 npm compare에서 최근 결과가 더 좋은 react-i18next를 도입하기로 결정했다.\n도입 #\r구글 스프레드 시트 연동\nhttps://console.cloud.google.com/apis/dashboard 사용자 인증 정보(Credentials) -\u0026gt; 사용자 인증 정보 만들기(CREATE CREDENTIALS) -\u0026gt; 서비스 계정(Service account) 서비스 계정(Service Accounts)에서 방금 생성한 계정 클릭 키(KEYS) 탭에서 JSON 파일로 새 키 만들기 세부정보(DETAILS) 탭에서 이메일 복사 후 구글 스프레드 시트에서 공유 설정 설치\nyarn add react-i18next i18next @types/react-i18next @types/i18next i18next-scanner google-spreadsheet 설정\nsrc/i18n/index.ts\rimport i18n from \u0026#34;i18next\u0026#34;; import { initReactI18next } from \u0026#34;react-i18next\u0026#34;; import enUS from \u0026#34;./locales/en-US/translation.json\u0026#34;; import esES from \u0026#34;./locales/es-ES/translation.json\u0026#34;; import jaJP from \u0026#34;./locales/ja-JP/translation.json\u0026#34;; import koKR from \u0026#34;./locales/ko-KR/translation.json\u0026#34;; import viVN from \u0026#34;./locales/vi-VN/translation.json\u0026#34;; //TODO: 언어 추가 시 폴더 및 파일 추가 후 작성 필요 const resources = { ko: { translation: koKR }, en: { translation: enUS }, ja: { translation: jaJP }, vi: { translation: viVN }, es: { translation: esES }, }; const browserLang = window.navigator.language.split(\u0026#34;-\u0026#34;)[0]; const userLanguage = localStorage.getItem(\u0026#34;i18nLng\u0026#34;) ?? browserLang; // eslint-disable-next-line import/no-named-as-default-member i18n.use(initReactI18next).init({ resources, lng: userLanguage || \u0026#34;ko\u0026#34;, fallbackLng: \u0026#34;ko\u0026#34;, debug: false, defaultNS: \u0026#34;translation\u0026#34;, ns: \u0026#34;translation\u0026#34;, keySeparator: false, interpolation: { escapeValue: false, alwaysFormat: true, format(value, format, lng) { if (format === \u0026#34;uppercase\u0026#34;) return value.toUpperCase(); if (typeof value === \u0026#34;number\u0026#34;) return value.toLocaleString(lng); return value; }, }, react: { defaultTransParent: \u0026#34;div\u0026#34;, transEmptyNodeValue: \u0026#34;\u0026#34;, transSupportBasicHtmlNodes: true, transKeepBasicHtmlNodesFor: [ \u0026#34;br\u0026#34;, \u0026#34;strong\u0026#34;, \u0026#34;i\u0026#34;, \u0026#34;button\u0026#34;, \u0026#34;a\u0026#34;, \u0026#34;span\u0026#34;, \u0026#34;div\u0026#34;, \u0026#34;input\u0026#34;, ], transWrapTextNodes: \u0026#34;\u0026#34;, }, nsSeparator: \u0026#34;=\u0026gt;\u0026#34;, // default: \u0026#34;:\u0026#34; }); export default i18n; export interface Ii18Next { // eslint-disable-next-line @typescript-eslint/ban-types t: (str: string, option?: Object) =\u0026gt; string; } export const i18nextScanKey = (key: string): string =\u0026gt; key; i18next-scanner.config.js\r/* eslint-disable import/order */ /* eslint-disable no-undef */ /* eslint-disable @typescript-eslint/no-var-requires */ const fs = require(\u0026#34;fs\u0026#34;); const path = require(\u0026#34;path\u0026#34;); const typescript = require(\u0026#34;typescript\u0026#34;); const COMMON_EXTENSIONS = \u0026#34;/**/*.{js,jsx,ts,tsx,vue,html}\u0026#34;; module.exports = { input: [`./src/${COMMON_EXTENSIONS}`], options: { debug: false, removeUnusedKeys: false, defaultLng: \u0026#34;ko-KR\u0026#34;, //TODO-i18next: 언어 추가 시 작성 필요 lngs: [\u0026#34;ko-KR\u0026#34;, \u0026#34;ko-KR\u0026#34;, \u0026#34;en-US\u0026#34;, \u0026#34;ja-JP\u0026#34;, \u0026#34;vi-VN\u0026#34;, \u0026#34;es-ES\u0026#34;], func: { list: [\u0026#34;i18next.t\u0026#34;, \u0026#34;i18n.t\u0026#34;, \u0026#34;$i18n.t\u0026#34;, \u0026#34;$i18next.t\u0026#34;, \u0026#34;i18nextScanKey\u0026#34;], extensions: [\u0026#34;.js\u0026#34;, \u0026#34;.jsx\u0026#34;], }, trans: { component: \u0026#34;Trans\u0026#34;, i18nKey: \u0026#34;i18nKey\u0026#34;, defaultsKey: \u0026#34;defaults\u0026#34;, extensions: [\u0026#34;.js\u0026#34;, \u0026#34;.jsx\u0026#34;], fallbackKey: function (ns, value) { return value; }, acorn: { ecmaVersion: 10, sourceType: \u0026#34;module\u0026#34;, }, }, resource: { loadPath: path.join(__dirname, \u0026#34;/src/i18n/locales/{{lng}}/{{ns}}.json\u0026#34;), savePath: path.join(__dirname, \u0026#34;/src/i18n/locales/{{lng}}/{{ns}}.json\u0026#34;), }, defaultValue(lng, ns, key) { const keyAsDefaultValue = [\u0026#34;ko-KR\u0026#34;]; if (keyAsDefaultValue.includes(lng)) { const separator = \u0026#34;html\u0026#34;; const value = key.includes(separator) ? \u0026#34;\u0026#34; : key; return value; } return \u0026#34;[Fill in]\u0026#34;; }, keySeparator: false, nsSeparator: false, prefix: \u0026#34;{{\u0026#34;, suffix: \u0026#34;}}\u0026#34;, }, transform: (function typescriptTransform( options = { tsOptions: { target: \u0026#34;es2018\u0026#34;, }, extensions: [\u0026#34;.ts\u0026#34;, \u0026#34;.tsx\u0026#34;], } ) { return function transform(file, enc, done) { const { base, ext } = path.parse(file.path); if ( options.extensions.includes(ext) \u0026amp;\u0026amp; !base.endsWith(\u0026#34;.d.ts\u0026#34;) \u0026amp;\u0026amp; base.indexOf(\u0026#34;reportWebVitals.ts\u0026#34;) === -1 ) { const content = fs.readFileSync(file.path, enc); const { outputText } = typescript.transpileModule(content, { compilerOptions: options.tsOptions, fileName: path.basename(file.path), }); this.parser.parseTransFromString(outputText); this.parser.parseFuncFromString(outputText); } done(); }; })({ extensions: [\u0026#34;.tsx\u0026#34;, \u0026#34;.ts\u0026#34;], tsOptions: { target: \u0026#34;es5\u0026#34;, module: \u0026#34;esnext\u0026#34;, }, }), }; translate/.credentials/...\r.gitignore에 translate/.credentials 추가 서비스 계정에서 받은 JSON 키 파일을 translate/.credentials에 저장 translate/.credentials/index.js module.exports = { CREDS: \u0026#34;서비스 계정에서 받은 JSON 키 파일 이름\u0026#34;, // 구글 스프레드 시트 주소에 나와 있음 SHEET_DOC_ID: \u0026#34;...\u0026#34;, SHEET_ID: \u0026#34;...\u0026#34;, }; translate/index.js\r/* eslint-disable import/order */ /* eslint-disable no-undef */ /* eslint-disable @typescript-eslint/no-var-requires */ const { GoogleSpreadsheet } = require(\u0026#34;google-spreadsheet\u0026#34;); const ENV = require(\u0026#34;./.credentials/index.js\u0026#34;); const creds = require(\u0026#34;./.credentials/\u0026#34; + ENV.CREDS); const i18nextConfig = require(\u0026#34;../i18next-scanner.config\u0026#34;); const spreadsheetDocId = ENV.SHEET_DOC_ID; const ns = \u0026#34;translation\u0026#34;; const lngs = i18nextConfig.options.lngs; const loadPath = i18nextConfig.options.resource.loadPath; const localesPath = loadPath.replace(\u0026#34;/{{lng}}/{{ns}}.json\u0026#34;, \u0026#34;\u0026#34;); const rePluralPostfix = new RegExp(/_plural|_[\\d]/g); const sheetId = ENV.SHEET_ID; const NOT_AVAILABLE_CELL = \u0026#34;_N/A\u0026#34;; //TODO-i18next: 언어 추가 시 작성 필요 const columnKeyToHeader = { key: \u0026#34;key\u0026#34;, \u0026#34;ko-KR\u0026#34;: \u0026#34;ko-KR\u0026#34;, \u0026#34;en-US\u0026#34;: \u0026#34;en-US\u0026#34;, \u0026#34;ja-JP\u0026#34;: \u0026#34;ja-JP\u0026#34;, \u0026#34;vi-VN\u0026#34;: \u0026#34;vi-VN\u0026#34;, \u0026#34;es-ES\u0026#34;: \u0026#34;es-ES\u0026#34;, }; async function loadSpreadsheet() { // eslint-disable-next-line no-console console.info( \u0026#34;\\u001B[32m\u0026#34;, \u0026#34;=====================================================================================================================\\n\u0026#34;, \u0026#34;# i18next auto-sync using Spreadsheet\\n\\n\u0026#34;, \u0026#34; * Download translation resources from Spreadsheet and make /src/i18n/locales/{{lng}}/{{ns}}.json\\n\u0026#34;, \u0026#34; * Upload translation resources to Spreadsheet.\\n\\n\u0026#34;, `The Spreadsheet for translation is here (\\u001B[34mhttps://docs.google.com/spreadsheets/d/${spreadsheetDocId}/#gid=${sheetId}\\u001B[0m)\\n`, \u0026#34;=====================================================================================================================\u0026#34;, \u0026#34;\\u001B[0m\u0026#34; ); const doc = new GoogleSpreadsheet(spreadsheetDocId); await doc.useServiceAccountAuth(creds); await doc.loadInfo(); return doc; } function getPureKey(key = \u0026#34;\u0026#34;) { return key.replace(rePluralPostfix, \u0026#34;\u0026#34;); } module.exports = { localesPath, loadSpreadsheet, getPureKey, ns, lngs, sheetId, columnKeyToHeader, NOT_AVAILABLE_CELL, }; translate/upload.js\r/* eslint-disable no-undef */ /* eslint-disable @typescript-eslint/no-var-requires */ const fs = require(\u0026#34;fs\u0026#34;); const { loadSpreadsheet, localesPath, getPureKey, ns, lngs, sheetId, columnKeyToHeader, NOT_AVAILABLE_CELL, } = require(\u0026#34;./index\u0026#34;); //TODO-i18next: 언어 추가 시 작성 필요 const headerValues = [\u0026#34;key\u0026#34;, \u0026#34;ko-KR\u0026#34;, \u0026#34;en-US\u0026#34;, \u0026#34;ja-JP\u0026#34;, \u0026#34;vi-VN\u0026#34;, \u0026#34;es-ES\u0026#34;]; async function addNewSheet(doc, title, sheetId) { const sheet = await doc.addSheet({ sheetId, title, headerValues, }); return sheet; } async function updateTranslationsFromKeyMapToSheet(doc, keyMap) { const title = \u0026#34;시트 제목\u0026#34;; let sheet = doc.sheetsById[sheetId]; if (!sheet) { sheet = await addNewSheet(doc, title, sheetId); } const rows = await sheet.getRows(); const exsitKeys = {}; const addedRows = []; rows.forEach((row) =\u0026gt; { const key = row[columnKeyToHeader.key]; if (keyMap[key]) { exsitKeys[key] = true; } }); for (const [key, translations] of Object.entries(keyMap)) { if (!exsitKeys[key]) { const row = { [columnKeyToHeader.key]: key, ...Object.keys(translations).reduce((result, lng) =\u0026gt; { const header = columnKeyToHeader[lng]; result[header] = translations[lng]; return result; }, {}), }; addedRows.push(row); } } await sheet.addRows(addedRows); } function toJson(keyMap) { const json = {}; Object.entries(keyMap).forEach(([, keysByPlural]) =\u0026gt; { for (const [keyWithPostfix, translations] of Object.entries(keysByPlural)) { json[keyWithPostfix] = { ...translations, }; } }); return json; } function gatherKeyMap(keyMap, lng, json) { for (const [keyWithPostfix, translated] of Object.entries(json)) { const key = getPureKey(keyWithPostfix); if (!keyMap[key]) { keyMap[key] = {}; } const keyMapWithLng = keyMap[key]; if (!keyMapWithLng[keyWithPostfix]) { keyMapWithLng[keyWithPostfix] = lngs.reduce((initObj, lng) =\u0026gt; { initObj[lng] = NOT_AVAILABLE_CELL; return initObj; }, {}); } keyMapWithLng[keyWithPostfix][lng] = translated; } } async function updateSheetFromJson() { const doc = await loadSpreadsheet(); fs.readdir(localesPath, (error, lngs) =\u0026gt; { if (error) { throw error; } const keyMap = {}; lngs.forEach((lng) =\u0026gt; { const localeJsonFilePath = `${localesPath}/${lng}/${ns}.json`; // eslint-disable-next-line no-sync const json = fs.readFileSync(localeJsonFilePath, \u0026#34;utf8\u0026#34;); gatherKeyMap(keyMap, lng, JSON.parse(json)); }); updateTranslationsFromKeyMapToSheet(doc, toJson(keyMap)); }); } updateSheetFromJson(); translate/download.js\r/* eslint-disable no-undef */ /* eslint-disable @typescript-eslint/no-var-requires */ const fs = require(\u0026#34;fs\u0026#34;); const mkdirp = require(\u0026#34;mkdirp\u0026#34;); const { loadSpreadsheet, localesPath, ns, lngs, sheetId, columnKeyToHeader, NOT_AVAILABLE_CELL, } = require(\u0026#34;./index\u0026#34;); /** * fetch translations from google spread sheet and transform to json * @param {GoogleSpreadsheet} doc GoogleSpreadsheet document * @returns [object] translation map * { * \u0026#34;ko-KR\u0026#34;: { * \u0026#34;key\u0026#34;: \u0026#34;value\u0026#34; * }, * \u0026#34;en-US\u0026#34;: { * \u0026#34;key\u0026#34;: \u0026#34;value\u0026#34; * }, * } */ async function fetchTranslationsFromSheetToJson(doc) { const sheet = doc.sheetsById[sheetId]; if (!sheet) { return {}; } const lngsMap = {}; const rows = await sheet.getRows(); rows.forEach((row) =\u0026gt; { const key = row[columnKeyToHeader.key]; lngs.forEach((lng) =\u0026gt; { const translation = row[columnKeyToHeader[lng]]; if (translation === NOT_AVAILABLE_CELL) { return; } if (!lngsMap[lng]) { lngsMap[lng] = {}; } lngsMap[lng][key] = translation || \u0026#34;\u0026#34;; }); }); return lngsMap; } function checkAndMakeLocaleDir(dirPath, subDirs) { return new Promise((resolve) =\u0026gt; { subDirs.forEach((subDir, index) =\u0026gt; { mkdirp(`${dirPath}/${subDir}`, (err) =\u0026gt; { if (err) { throw err; } if (index === subDirs.length - 1) { resolve(); } }); }); }); } async function updateJsonFromSheet() { await checkAndMakeLocaleDir(localesPath, lngs); const doc = await loadSpreadsheet(); const lngsMap = await fetchTranslationsFromSheetToJson(doc); fs.readdir(localesPath, (error, lngs) =\u0026gt; { if (error) { throw error; } lngs.forEach((lng) =\u0026gt; { const localeJsonFilePath = `${localesPath}/${lng}/${ns}.json`; const jsonString = JSON.stringify(lngsMap[lng], null, 2); fs.writeFile(localeJsonFilePath, jsonString, \u0026#34;utf8\u0026#34;, (err) =\u0026gt; { if (err) { throw err; } }); }); }); } updateJsonFromSheet(); src/index.tsx\rimport \u0026#34;i18n\u0026#34;; ... package.json\r\u0026#34;scripts\u0026#34;: { ..., \u0026#34;scan:i18n\u0026#34;: \u0026#34;i18next-scanner --config i18next-scanner.config.js\u0026#34;, \u0026#34;upload:i18n\u0026#34;: \u0026#34;yarn run scan:i18n \u0026amp;\u0026amp; node translate/upload.js\u0026#34;, \u0026#34;download:i18n\u0026#34;: \u0026#34;node translate/download.js\u0026#34; }, 사용법 #\r# i18next.t()로 감싸져 있는 키를 스캔 후 업로드 yarn upload:i18n # 구글 스프레드 시트에서 번역을 받아옴 yarn download:i18n import { Trans, useTranslation } from \u0026#34;react-i18next\u0026#34;; import type { Ii18Next } from \u0026#39;i18n\u0026#39;; export default function Example() { const i18next = useTranslation(); // scan을 위한 자체 컨벤션으로 \u0026#34;i18next\u0026#34; 사용 const getTabList = (i18next: Ii18Next) =\u0026gt; [ { id: 1, label: i18next.t(\u0026#34;예시 1\u0026#34;) }, { id: 2, label: i18next.t(\u0026#34;예시 2\u0026#34;) }, { id: 3, label: i18next.t(\u0026#34;예시 3\u0026#34;) }, ]; const tabList = getTabList(i18next); return ( \u0026lt;div\u0026gt; // 1) 일반 사용 {i18next.t(\u0026#34;이메일\u0026#34;)} // 2) 변수 사용 {i18next.t( `이메일은 \u0026#34;{{email}}\u0026#34;이고 , 비밀번호는 \u0026#34;{{password}}\u0026#34;이다.`, { email: \u0026#34;example@gmail.com\u0026#34;, password: \u0026#34;1234\u0026#34; }, )} // 3) 단수・복수 사용; 변수명으로 count를 사용 해야함 {i18next.t(`같은 명의로 만들어진 아이디는 {{count}}개입니다.`, { count: 3 })} // 4) html 태그 사용; i18nKey에 \u0026#34;html\u0026#34;을 포함 해야함(scan을 위한 자체 컨벤션) \u0026lt;Trans i18nKey=\u0026#34;예시 html\u0026#34;\u0026gt; {{ name: \u0026#34;정유찬\u0026#34; }}님은 i18next를 \u0026lt;br /\u0026gt; 사용할 수 있습니다. \u0026lt;/Trans\u0026gt; // 5) return 외부에서 사용 {tabList.map((tab) =\u0026gt; ( \u0026lt;div\u0026gt; {tab.label} \u0026lt;/div\u0026gt; ))} \u0026lt;/div\u0026gt;; ) } *조건부 서식 활용해서 작업이 필요한 부분의 가시성을 높혔다.\nReference.\nhttps://npmtrends.com/react-i18next-vs-react-intl https://npmcompare.com/compare/i18n-react,react-i18next,react-intl,react-intl-redux [React] 국제화(internationalization, i18n) 라이브러리 비교 https://www.i18next.com/ 기존 프로젝트에 다국어 처리를 적용해보자(react-i18next) ","date":"6 November 2022","permalink":"/posts/work/2/","section":"Posts","summary":"배경 #\r새로 진행하고 있는 B2B 프로젝트에 글로벌 진출 기회가 생겨서 다국어 처리를 할 필요가 생겼다.","title":"다국어 처리 (react-i18next)"},{"content":"","date":"5 November 2022","permalink":"/tags/sass/","section":"Tags","summary":"","title":"sass"},{"content":"배경 #\r제품 상세페이지의 제품 이미지 바로 아래에 해당 제품의 평균 별점이 보이면 좋겠다는 의견이 나와서 이를 반영하기로 했다. 리뷰에 이미 평균 별점을 보여주는 기능이 적용되어 있었지만 별이 정수 단위로만 채워지고 있어서(예시. 4.3점이면 네 개, 4.5점이면 다섯 개) 소수점까지 정확히 반영되는 별점을 만들고 싶었다.\n시행착오 #\r처음에는 별 5개가 나란히 있는 이미지를 받은 다음 아래에는 비어있는 별을, 위에는 채워져 있는 별을 겹쳐서 배치한 다음 채워져 있는 별의 부모 요소 넓이를 백분율에 따라 줄이고 overflow: hidden; 스타일을 적용하는 것으로 쉽게 구현했었다. 하지만 별 사이의 간격까지 백분율에 반영해 버리는 문제점을 지니고 있었다.\n구현 #\r문제점을 해결하기 위해서 별 하나하나를 정수로 구분하고 별 내부를 소수점으로 구분하는 방법을 사용했다. 그리고 소수점 단위의 스타일 적용을 sass에서 구현하기 위해서 https://www.sassmeister.com/ 사이트를 참조해가며 반복문을 작성했다. (styled-component의 props가 잠시 그리워지는 시점이었다.) 마지막으로 별의 일부만 채우는 기능을 구현하기 위해 \u0026lt;svg/\u0026gt;에 margin-left: ...;를 마이너스 단위로 줘서 이동시킨 다음 내부의 \u0026lt;path/\u0026gt;를 transform: translateX(...);로 다시 이동시키는 방법을 사용했다.\n별점 리뷰 컴포넌트 #\rimport { StarSvg } from \u0026#34;src/assets/index\u0026#34;; import styles from \u0026#34;./StarReview.module.scss\u0026#34;; interface IStarsProps { score: number | undefined; size: string; emptyColor: string; filledColor: string; } /** * 5점 만점의 별점 리뷰 컴포넌트 `★★★★☆` * @score 별점(1~5점) e.g. `4.3` * @size 크기 e.g. `4vw` * @emptyColor 비었을 때 색상 e.g. `\u0026#34;#EEEDEF\u0026#34;` * @filledColor 찼을 때 색상 e.g. `\u0026#34;#6435C7\u0026#34;` */ export default function StarReview({ score, size, emptyColor, filledColor, }: IStarsProps) { const arr = new Array(5).fill(0); const _score = score || 0; const integer = Math.floor(_score); const decimal = Number((Number(_score.toFixed(1)) - integer).toFixed(1)) * 10; return ( \u0026lt;div className={styles.container}\u0026gt; \u0026lt;div className={styles.stars}\u0026gt; {arr.map((_, i) =\u0026gt; ( \u0026lt;StarSvg width={size} height={size} fill={emptyColor} key={i} /\u0026gt; ))} \u0026lt;/div\u0026gt; {!_score || _score \u0026lt; 1 || _score \u0026gt; 5 ? null : ( \u0026lt;div className={styles.stars} data-type=\u0026#34;filled\u0026#34;\u0026gt; {arr.map((_, i) =\u0026gt; ( \u0026lt;div key={i} data-decimal={decimal} data-index={i === integer ? \u0026#34;true\u0026#34; : \u0026#34;false\u0026#34;} data-empty={i \u0026gt; integer ? \u0026#34;true\u0026#34; : \u0026#34;false\u0026#34;} \u0026gt; \u0026lt;StarSvg width={size} height={size} fill={filledColor} /\u0026gt; \u0026lt;/div\u0026gt; ))} \u0026lt;/div\u0026gt; )} \u0026lt;/div\u0026gt; ); } 별점 리뷰 스타일 #\r.container { position: relative; .stars { display: flex; gap: 4px; \u0026amp;[data-type=\u0026#34;filled\u0026#34;] { top: 0; position: absolute; @for $i from 0 through 9 { \u0026gt; div[data-decimal=\u0026#34;#{$i}\u0026#34;][data-index=\u0026#34;true\u0026#34;] \u0026gt; svg { margin-left: -(100% - percentage($i * 0.1)); \u0026gt; path { transform: translateX(100% - percentage($i * 0.1)); } } } \u0026gt; div[data-empty=\u0026#34;true\u0026#34;] \u0026gt; svg { display: none; } } } } 별 이미지 (svg) #\r\u0026lt;svg width=\u0026#34;current\u0026#34; height=\u0026#34;current\u0026#34; viewBox=\u0026#34;0 0 16 16\u0026#34; fill=\u0026#34;none\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; \u0026gt; \u0026lt;path d=\u0026#34;M7.71663 0.815216C7.81002 0.546548 8.18998 0.546548 8.28337 0.815216L9.81237 5.21396C9.85357 5.33248 9.96418 5.41284 10.0896 5.4154L14.7456 5.51028C15.0299 5.51608 15.1474 5.87744 14.9207 6.04928L11.2097 8.86273C11.1097 8.93854 11.0675 9.06857 11.1038 9.18867L12.4524 13.6461C12.5347 13.9183 12.2273 14.1416 11.9939 13.9792L8.17135 11.3192C8.06836 11.2476 7.93164 11.2476 7.82865 11.3192L4.00614 13.9792C3.77267 14.1416 3.46527 13.9183 3.54764 13.6461L4.89617 9.18867C4.9325 9.06857 4.89025 8.93854 4.79027 8.86273L1.0793 6.04928C0.852639 5.87744 0.970053 5.51608 1.25443 5.51028L5.91037 5.4154C6.03582 5.41284 6.14643 5.33248 6.18763 5.21396L7.71663 0.815216Z\u0026#34; fill=\u0026#34;current\u0026#34; /\u0026gt; \u0026lt;/svg\u0026gt; export { ReactComponent as StarSvg } from \u0026#34;./star.svg\u0026#34;; *CRA 시에만 ReactComponent 사용 가능\n참조 #\r출근 첫날 회사의 코드를 뜯어보는 과정에서 이 코드를 보고는 \u0026ldquo;이런 식으로 sass에서 반복문을 활용하는구나\u0026quot;를 알게 되었고 메모장에 메모해 뒀었다. (취업 전에는 styled-component와 tailwind-CSS를 주로 사용해서 sass에 대한 이해도가 상대적으로 부족했다.) 그리고 별점의 소수점을 어떻게 sass에서 반영할 수 있을까를 고민하는 과정에서 이 코드가 떠올랐고 이를 참조해서 문제를 쉽게 해결할 수 있었다.\n$spacesPx: (2, 4, 6, 8, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100); @each $space in $spacesPx { .mt#{$space} { margin-top: #{$space}px; } .mr#{$space} { margin-right: #{$space}px; } .mb#{$space} { margin-bottom: #{$space}px; } .ml#{$space} { margin-left: #{$space}px; } } ","date":"5 November 2022","permalink":"/posts/work/1/","section":"Posts","summary":"배경 #\r제품 상세페이지의 제품 이미지 바로 아래에 해당 제품의 평균 별점이 보이면 좋겠다는 의견이 나와서 이를 반영하기로 했다.","title":"평균 별점 (소수점 반영)"},{"content":"","date":"31 October 2022","permalink":"/categories/etc/","section":"Categories","summary":"","title":"\u003cetc\u003e"},{"content":"","date":"31 October 2022","permalink":"/tags/error/","section":"Tags","summary":"","title":"error"},{"content":"","date":"31 October 2022","permalink":"/tags/git/","section":"Tags","summary":"","title":"git"},{"content":"배경 #\r취업을 하게 되면서 컴퓨터 두 대(개인 컴퓨터와 회사 컴퓨터)를 이용해 블로깅을 하게 되었고, 이 과정에서 서브 모듈 관련 문제를 만났다.\n문제 #\rblog 저장소에는 블로그 설정, 테마 등의 모든 요소가 저장되고 yuchanjeong.github.io 저장소에는 빌드 된 정적 파일들만 저장되고 있다. blog 저장소에서 블로그에 관한 모든 것들을 관리하고 yuchanjeong.github.io 저장소는 서브 모듈로 관리하고 있는데 git clone을 한 뒤 push를 했을 때 blog 저장소에는 정상적으로 반영이 되나 yuchanjeong.github.io 저장소에는 전혀 반영이 되지 않는 문제가 발생했다.\n해결 #\r문제의 원인은 일반 클론 시 서브 모듈까지 클론하지 않기 때문이었다. 그래서 git clone --recurse-submodules를 통해 서브 모듈까지 클론해 줬다. 하지만 여전히 문제가 해결되지 않았고, cd public을 통해 서브 모듈로 이동한 뒤 확인해 보자 서브 모듈의 현재 브랜치가 main이 아니었다. 그래서 서브 모듈의 브랜치를 main으로 변경해 주자 문제가 해결되었다.\n*만약 기존 폴더를 그대로 사용한다면 git pull origin main --rebase를 통해 변경사항을 당겨 받은 뒤 서브 모듈로 이동해 git pull origin main -f를 통해 서브 모듈의 변경사항도 당겨 받으면 된다.\nEtc #\r서브 모듈 등록 git submodule add -b main https://github.com/YuchanJeong/yuchanjeong.github.io.git public 원격 저장소의 서브 모듈로 업데이트 하기 git submodule update --remote 스크립트의 개행 제거 vi -b up.sh :%s/control+v -\u0026gt; control+m//g ","date":"31 October 2022","permalink":"/posts/etc/1/","section":"Posts","summary":"배경 #\r취업을 하게 되면서 컴퓨터 두 대(개인 컴퓨터와 회사 컴퓨터)를 이용해 블로깅을 하게 되었고, 이 과정에서 서브 모듈 관련 문제를 만났다.","title":"깃허브 블로그 서브 모듈 문제"},{"content":"1) 기본 설정 #\rCommand Details git init 깃 추적 시작 git config --global --list 기본 설정 보기 git config --global core.autocrlf true 개행문자 설정 git config --global user.name YuchanJeong 사용자 이름 설정 git config --global user.email yuchanjeong0923@gmail.com 사용자 메일 설정 git config --global core.editor vim 기본 에디터 설정 git config --global init.defaultBranch main 기본 브랜치 설정 git config --global commit.template ~/.gitmessage.txt 커밋 템플릿 설정 .vimrc\rset nocompatible \u0026#34; 오리지날 VI와 호환하지 않음 set autoindent \u0026#34; 자동 들여쓰기 set cindent \u0026#34; C 프로그래밍용 자동 들여쓰기 set smartindent \u0026#34; 스마트한 들여쓰기 set wrap set nowrapscan \u0026#34; 검색할 때 문서의 끝에서 처음으로 안돌아감 set nobackup \u0026#34; 백업 파일을 안만듬 set noswapfile \u0026#34;set visualbell \u0026#34; 키를 잘못눌렀을 때 화면 프레시 set ruler \u0026#34; 화면 우측 하단에 현재 커서의 위치(줄,칸) 표시 set shiftwidth=4 \u0026#34; 자동 들여쓰기 4칸 set number \u0026#34; 행번호 표시, set nu 도 가능 set fencs=ucs-bom,utf-8,euc-kr.latin1 \u0026#34; 한글 파일은 euc-kr로, 유니코드는 유니코드로 set fileencoding=utf-8 \u0026#34; 파일저장인코딩 set tenc=utf-8 \u0026#34; 터미널 인코딩 \u0026#34;set expandtab \u0026#34; 탭대신 스페이스 set hlsearch \u0026#34; 검색어 강조, set hls 도 가능 set ignorecase \u0026#34; 검색시 대소문자 무시, set ic 도 가능 set tabstop=4 \u0026#34; 탭을 4칸으로 set lbr set incsearch \u0026#34; 키워드 입력시 점진적 검색 set cursorline \u0026#34; 편집 위치에 커서 라인 설정 set laststatus=2 \u0026#34; 상태바 표시를 항상한다 syntax on \u0026#34; 구문강조 사용 filetype indent on \u0026#34; 파일 종류에 따른 구문강조 set background=dark \u0026#34; 하이라이팅 lihgt / dark set backspace=eol,start,indent \u0026#34; 줄의 끝, 시작, 들여쓰기에서 백스페이스시 이전줄로 set history=1000 \u0026#34; vi 편집기록 기억갯수 .viminfo에 기록 highlight Comment term=bold cterm=bold ctermfg=4 \u0026#34; 코멘트 하이라이트 set mouse=a \u0026#34; vim에서 마우스 사용 set t_Co=256 \u0026#34; 색 조정 .gitmessage.txt\r# ---------- # [add] 기능 추가 / e.g. [add] 로그인 기능 추가: 자체 로그인, Kakao 소셜 로그인 # [delete] 기능 삭제 / e.g. [delete] Kakao 소셜 로그인 기능 삭제 # [update] 기능 개선 / e.g. [update] 자체 로그인에 성별 입력 추가 # [change] 기능 변경 / e.g. [change] 로그인 유효성 검사 조건 변경 # [modify] 기능 변경 없는 코드 변경 / e.g. [modify] 단순 주석 및 변수명 변경 # [fix] 문제 해결 / e.g. [fix] 비밀번호 대소문자 미구분 문제 해결 # [setting] 설치 및 설정 / e.g. [setting] 리덕스 설치 및 초기 설정 # [style] 스타일 관련 작업 / e.g. [style] 자체 로그인 페이지 스타일 적용 # [docs] 문서 관련 작업 / e.g. [docs] README.md 수정 # [test] 테스트 관련 작업 / e.g. [test] 결제 기능 테스트용 코드 # [chore] 기타 작업 / e.g. [chore] 빌드파일 수정 # ---------- # 개조식으로 작성 # \u0026#34;어떻게\u0026#34;가 아닌 \u0026#34;무엇\u0026#34;을 설명, 필요할 경우 \u0026#34;왜\u0026#34;도 설명 # 내용이 필요할 경우 제목에서 한 줄 띄우고 작성 # 내용이 여러 줄일 때는 \u0026#34;-\u0026#34;로 구분 # ---------- # \u0026#34;... 추가\u0026#34;는 [add], \u0026#34;...에 ... 추가\u0026#34;는 [update] # 리팩토링 등의 중요한 변경이 아닌 [modify]는 \u0026#34;단순\u0026#34; 키워드 사용 2) 원격 저장소 #\rCommand Details git remote -v 원격 저장소 연결 확인 git remote add [name] [url] 원격 저장소 연결 git remote remove [name] 원격 저장소 연결 해제 git push [name] [branch] (-f) 원격 저장소에 Push (강제) git pull [name] [branch] (--rebase) 원격 저장소 Pull (이어 붙히기) git clone [url] ([directory]) 원격 저장소 복사 (폴더명) 3) 파일 상태 #\rCommand Details git status 파일 상태 확인 git diff 파일 상태 비교*작업역역과 스테이지 차이 git diff --cached 파일 상태 비교*스테이지와 저장소 차이 git diff [commit] [commit] 커밋 간 상태 비교 git diff [branch] [branch] 브랜치 간 상태 비교 4) 스테이징 (추가) #\rCommand Details git add -p 변경 내용을 확인 후 청크 별로 추가*y(추가), n(제외), q(종료) git add [directory] 해당 폴더 및 하위 폴더의 변경 내용을 추가 git add . 현재 폴더 및 하위 폴더의 변경 내용을 추가 5) 커밋 (확정) #\rCommand Details git commit 커밋 생성 git commit -m \u0026ldquo;[msg]\u0026rdquo; 커밋 메시지와 함께 커밋 생성 git commit -am \u0026ldquo;[msg]\u0026rdquo; 스테이징 후 커밋 메시지와 함께 커밋 생성 *한 번 이상 커밋 한 파일만 가능 git commit --amend 마지막 커밋 메시지 수정 6) 커밋 기록 #\rCommand Details git log 커밋 기록 보기 git log -p 커밋 기록과 패치내용 보기 git log --stat 커밋 기록과 패치통계 보기 git log --graph 커밋 기록과 그래프 보기 git log [branch]..[branch] 후자에만 있는 커밋 기록 보기 7) 되돌리기 #\rCommand Details git reset --hard [commit] | HEAD[~n] 해당 커밋으로 되돌린 후이후의 커밋, 스테이징, 작업 초기화 git reset [commit] | HEAD[~n] 해당 커밋으로 되돌린 후이후의 커밋, 스테이징 초기화 git reset --soft [commit] | HEAD[~n] 해당 커밋으로 되돌린 후이후의 커밋 초기화 git revert [commit] 해당 커밋의 수정사항 취소 후 새 커밋 생성 git revert [commit]..[commit] 해당 범위의 수정사항 취소 후 새 커밋 생성 git rebase -i [commit] | HEAD[~n] p: 커밋 그냥 사용, 재정렬 및 삭제 가능r: 커밋 메시지 수정e: 커밋 메시지 및 내용 수정*HEAD가 해당 커밋으로 이동, 추가 작업 가능*git rebase --continue (작업 종료)*git rebase --abort (작업 중단)s: squash merged: 커밋 삭제 8) 임시 저장 #\rCommand Details git stash (-u) 임시 저장 후 직전 커밋 상태로 되돌아감 (새 파일도)*한 번 이상 스테이징 한 파일만 가능 git stash list 임시 저장 목록 보기 git stash apply (stash@{[n]}) 최근(해당) 임시 저장 상태로 돌아가기 git stash drop (stash@{[n]}) 최근(해당) 임시 저장 상태 지우기 git stash pop 최근 임시 저장 상태 apply 후 drop 9) 브랜치 #\rCommand Details git branch (-a) 브랜치 목록 보기 (원격 목록도) git branch [branch] 브랜치 생성 git branch -d [branch] 해당 브랜치 삭제 git branch -m [branch] [branch] 브랜치명 바꾸기 git checkout [branch] 브랜치 전환 git checkout -b [branch] 브랜치 생성 후 전환 git merge [branch] (--squash) 현재 브랜치에 해당 브랜치 병합 (스쿼시 병합) git rebase [branch] 현재 브랜치에 해당 브랜치 이어 붙이기 10) 삭제 #\rCommand Details git rm (--cached) [file] 해당 파일 삭제 (원격에서만) git rm -r (--cached) [directory] 해당 폴더 삭제 (원격에서만) git fetch --all --prune 원격 브랜치 흔적 삭제 Etc #\r1) .gitignore #\rList Details example.xxx 해당 파일명 전부 제외 /example.xxx 현재 폴더의 해당 파일 제외 example/ 해당 폴더와 하위 경로 제외 example/example.xxx 해당 폴더의 해당 파일 제외 *.xxx 특정 확장자 파일 전부 제외 !example.xxx 예외 파일명 (버전 관리 ON) 2) SSH 등록 #\rssh-keygen으로 ~/.ssh/에 id_rsa.pub(공개키)와 id_rsa(개인키) 생성 공개키를 Github의 Settings/SSH and GPG keys에 등록 3) Github 계정 오류 #\r키체인 접근 -\u0026gt; github.com ","date":"30 October 2022","permalink":"/posts/summary/git/","section":"Posts","summary":"1) 기본 설정 #\rCommand Details git init 깃 추적 시작 git config --global --list 기본 설정 보기 git config --global core.","title":"Git"},{"content":"","date":"29 October 2022","permalink":"/categories/book/","section":"Categories","summary":"","title":"\u003cbook\u003e"},{"content":"","date":"29 October 2022","permalink":"/tags/convention/","section":"Tags","summary":"","title":"convention"},{"content":" 개발자의 글쓰기는 \u0026lsquo;정확\u0026rsquo;하고 \u0026lsquo;간결\u0026rsquo;하고 \u0026lsquo;가독성\u0026rsquo;이 높아야 한다.\n1) 기초 #\r두괄식 - 핵심 설명 후 부가 설명 구조화 - 들여쓰기 활용 Ps1. 함수명에 사용하는 영단어 뉘앙스 차이\nstop(중지) / restart(재개) end(종료) / start(시작) finish(완전 종료) / pause(일시 중지) / hold(의도를 지닌 중지) get(획득) / retrieve(검색 후 획득) / acquire(독점 획득) / fetch(다음 대상 획득) set(할당) / init(초기값 할당) create(틀을 만듦) / register(만들어진 틀에 입력) change(내용 변화) / modify(틀린 내용 수정) / revise(새로운 내용으로 개정) do(행동) / must(필수) / should(권고) is(boolean 데이터) Ps2. \u0026ldquo;-조사\u0026rdquo;, \u0026ldquo;-하다\u0026rdquo;, \u0026ldquo;숫자-\u0026rdquo;, \u0026ldquo;-기호-\u0026ldquo;만 붙여 쓰고 나머지는 띄어 씀\n2) 네이밍과 주석 #\r기본적인 네이밍 컨벤션 클래스와 컴포넌트 - PascalCase\n함수와 변수 - camelCase\n상수 - UPPER_DELIMITER_CASE\n패키지와 모듈 - lowercase 명사+명사+명사 (변수) 형용사+명사+명사 (변수) 동사+명사+명사 (함수) BEM 클래스 표기법 - 대상__요소\u0026ndash;상태 변수명 명확한 의미(E.g. d, day(X) -\u0026gt; today, someday(O)) 복수형은 짧을 때는 \u0026ldquo;-s\u0026rdquo;, 길 때는 \u0026ldquo;listOf-\u0026ldquo;나 \u0026ldquo;arrayOf-\u0026ldquo;로 표현 함수명 필요한 기능을 문장으로 작성 함수는 시스템이 할 일이기 때문에 사용자가 할 일은 삭제 중복 내용을 삭제하며 문장 정리 후 분리 1함수 1기능 원칙으로 문장 재분리 기능별 함수 작성 이름이 기능을 명확하게 설명해야 함 설명이 안될 경우 함수를 더 분리해야 함 좋은 이름의 기준 SMART Easy to Search 고전적 범주화 E.g. userBuyer, userPayer, userRegister Easy to Mix 상위 태그와 조합 E.g. h1.title, h2.title, p.title Easy to Agree 구별할 필요가 없는 것까지 이름을 새로 지을 필요 없음 Easy to Remember 이미 널리 알려진 용어는 그냥 쓰는 것이 효율적 Easy to Type 입력하기 쉽고 오타를 낼 가능성이 적은 이름 주석 코드는 의미를, 주석은 의도를 주석은 디버깅으로 바로 잡을 수 없으니 개발자가 신경 써야 함 3) 에러 메시지와 선택지 #\r에러의 내용, 원인, 해결법을 알려 줘야 함 \u0026ldquo;예 / 아니오\u0026rdquo; 보다는 구체적인 선택지를 제시 E.g. \u0026ldquo;페이지에 머물기 / 페이지에서 나가기\u0026rdquo; 순서에 일관성이 있어야 함 비활성화를 활용해 에러 예방 가능 4) 릴리스 문서와 장애 보고서 #\ra. 릴리즈 문서\n선정: 회사와 개발자가 말하고 싶은 것과 독자가 듣고 싶은 것 중 두 개 이상 만족하는 것 선정 분류: 독자에 따라 \u0026ldquo;개발 관점에서 비슷한 내용\u0026rdquo; 혹은 \u0026ldquo;사용 관점에서 비슷한 내용\u0026quot;으로 분류 요약: 불필요한 부사, 형용사, 조사, 어미 제거 종합: 종합은 분석의 개념화와 반대로 특징이나 결과로 서술 Ps. Semantic Versioning - major(호환 X).minor(새로운 기능).patch\nb. 장애 보고서\n문제, 문제점, 해결책, 후순 계획 순서로 작성 면책 조항 필수 필수, 권장, 선택, 예외 사항 표기 장애 보고서 구성 장애 내용 장애 영향 장애 원인 조치 사항 조치 결과 핵심 원인 향후 대책 장애의 근본 원인을 찾기 위해 원인의 원인을 계속 찾아라(5 whys) 재발을 막기 위해서는 원인 대신 이유를 묻고 사람 주어로 대답하라 개발 관점은 기능이 작동하지 않은 것, 비즈니스 관점은 손실이 발생한 것 모호하게 말고 정확한 정보를 적어라(E.g. 재발 가능성 30%) 5) 개발 가이드 #\r서비스 개념을 범주, 용도, 특징으로 설명하라 용도는 범주의 핵심 기능을 써라 특징은 장점(자신 기준)과 강점(경쟁사와 비교)에서 뽑아 써라 이해를 돕기 위해 그림과 글로 묘사해라 주관적 묘사와 객관적 묘사를 둘 다 써라 의견을 쓰려면 근거를 대라 주장과 이유, 문제와 답의 거리를 좁혀라 순서에서 단계를 단계에서 목차를 만들어라 6) SI 제안서 #\r고객의 문제인식이 중대하고 제안사의 문제 해결 능력이 탁월할 때, 경쟁사와 비교하여 강점들을 제안하라 고객의 문제인식이 중대하고 제안사의 문제 해결 능력이 부족할 때, 일단 동감하고 경쟁사와 다른 방안을 제시하라 고객의 문제인식이 사소하고 제안사의 문제 해결 능력이 탁월할 때, 고객이 문제를 중대하게 인식하게 만들어라 고객의 문제인식이 사소하고 제안사의 문제 해결 능력이 부족할 때, 경쟁사의 전략을 확인해서 대처하라 요구사항을 분석하지말고 제시하라 변화하는 요구사항에 대비하라 - Two Track(전체 검수와 기능별 검수) 개발 시간 대비 고객의 예상 만족도가 높은 것 위주로 개발하라 7) 기술 블로그 #\r주제 의식을 버리고 소재 의식으로 쓰자 독자 수준이 아니라 자기 수준으로 쓰자 저 직접 경험하고 실험한 과정이나 결과*목차를 잘 잡고 본문부터 써라 술 어떤 것을 분석하여 의미를 풀이하고 해석한 것*원전을 비교하고 실험해 풀이해서 써라 편 산만하고 복잡한 자료를 편집해 질서를 부여한 것*순서를 요약해서 써라 집 여러 사람의 견해나 흩어진 자료를 한데 모아 정리한 것*자료를 모아 핵심을 엮어 써라 ","date":"29 October 2022","permalink":"/posts/book/%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-%EA%B8%80%EC%93%B0%EA%B8%B0/","section":"Posts","summary":"개발자의 글쓰기는 \u0026lsquo;정확\u0026rsquo;하고 \u0026lsquo;간결\u0026rsquo;하고 \u0026lsquo;가독성\u0026rsquo;이 높아야 한다.","title":"개발자의 글쓰기 - 김철수"}]